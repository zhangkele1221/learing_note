// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: topology_config.proto

#include "topology_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace sw {
namespace proto {
PROTOBUF_CONSTEXPR Param::Param(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct ParamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ParamDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ParamDefaultTypeInternal() {}
  union {
    Param _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ParamDefaultTypeInternal _Param_default_instance_;
PROTOBUF_CONSTEXPR Module::Module(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.custom_params_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.factory_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct ModuleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModuleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModuleDefaultTypeInternal() {}
  union {
    Module _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModuleDefaultTypeInternal _Module_default_instance_;
PROTOBUF_CONSTEXPR MinimalTopology::MinimalTopology(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.element_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct MinimalTopologyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MinimalTopologyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MinimalTopologyDefaultTypeInternal() {}
  union {
    MinimalTopology _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MinimalTopologyDefaultTypeInternal _MinimalTopology_default_instance_;
PROTOBUF_CONSTEXPR SimpleTopology_Element::SimpleTopology_Element(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.custom_params_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct SimpleTopology_ElementDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SimpleTopology_ElementDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SimpleTopology_ElementDefaultTypeInternal() {}
  union {
    SimpleTopology_Element _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SimpleTopology_ElementDefaultTypeInternal _SimpleTopology_Element_default_instance_;
PROTOBUF_CONSTEXPR SimpleTopology::SimpleTopology(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.element_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct SimpleTopologyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SimpleTopologyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SimpleTopologyDefaultTypeInternal() {}
  union {
    SimpleTopology _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SimpleTopologyDefaultTypeInternal _SimpleTopology_default_instance_;
PROTOBUF_CONSTEXPR SemiSequentialTopology_Element::SemiSequentialTopology_Element(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.dependency_)*/{}
  , /*decltype(_impl_.custom_params_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct SemiSequentialTopology_ElementDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SemiSequentialTopology_ElementDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SemiSequentialTopology_ElementDefaultTypeInternal() {}
  union {
    SemiSequentialTopology_Element _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SemiSequentialTopology_ElementDefaultTypeInternal _SemiSequentialTopology_Element_default_instance_;
PROTOBUF_CONSTEXPR SemiSequentialTopology::SemiSequentialTopology(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.element_)*/{}
  , /*decltype(_impl_.custom_params_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct SemiSequentialTopologyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SemiSequentialTopologyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SemiSequentialTopologyDefaultTypeInternal() {}
  union {
    SemiSequentialTopology _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SemiSequentialTopologyDefaultTypeInternal _SemiSequentialTopology_default_instance_;
PROTOBUF_CONSTEXPR RunnableTopology_Element::RunnableTopology_Element(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.dependency_)*/{}
  , /*decltype(_impl_.custom_params_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.allow_parallel_)*/false} {}
struct RunnableTopology_ElementDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RunnableTopology_ElementDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RunnableTopology_ElementDefaultTypeInternal() {}
  union {
    RunnableTopology_Element _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RunnableTopology_ElementDefaultTypeInternal _RunnableTopology_Element_default_instance_;
PROTOBUF_CONSTEXPR RunnableTopology::RunnableTopology(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.element_)*/{}
  , /*decltype(_impl_.custom_params_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct RunnableTopologyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RunnableTopologyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RunnableTopologyDefaultTypeInternal() {}
  union {
    RunnableTopology _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RunnableTopologyDefaultTypeInternal _RunnableTopology_default_instance_;
PROTOBUF_CONSTEXPR TopologyConfig::TopologyConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.module_)*/{}
  , /*decltype(_impl_.runnable_topology_)*/{}
  , /*decltype(_impl_.minimal_topology_)*/{}
  , /*decltype(_impl_.simple_topology_)*/{}
  , /*decltype(_impl_.semi_sequential_topology_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TopologyConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TopologyConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TopologyConfigDefaultTypeInternal() {}
  union {
    TopologyConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TopologyConfigDefaultTypeInternal _TopologyConfig_default_instance_;
PROTOBUF_CONSTEXPR TopologyConfigWithModuleDefinition::TopologyConfigWithModuleDefinition(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.module_)*/{}
  , /*decltype(_impl_.runnable_topology_)*/nullptr} {}
struct TopologyConfigWithModuleDefinitionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TopologyConfigWithModuleDefinitionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TopologyConfigWithModuleDefinitionDefaultTypeInternal() {}
  union {
    TopologyConfigWithModuleDefinition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TopologyConfigWithModuleDefinitionDefaultTypeInternal _TopologyConfigWithModuleDefinition_default_instance_;
}  // namespace proto
}  // namespace sw
static ::_pb::Metadata file_level_metadata_topology_5fconfig_2eproto[11];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_topology_5fconfig_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_topology_5fconfig_2eproto = nullptr;

const uint32_t TableStruct_topology_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::sw::proto::Param, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::sw::proto::Param, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sw::proto::Param, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::sw::proto::Param, _impl_.value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::sw::proto::Module, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::sw::proto::Module, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sw::proto::Module, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::sw::proto::Module, _impl_.factory_name_),
  PROTOBUF_FIELD_OFFSET(::sw::proto::Module, _impl_.custom_params_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::sw::proto::MinimalTopology, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::sw::proto::MinimalTopology, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sw::proto::MinimalTopology, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::sw::proto::MinimalTopology, _impl_.element_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::sw::proto::SimpleTopology_Element, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::sw::proto::SimpleTopology_Element, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sw::proto::SimpleTopology_Element, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::sw::proto::SimpleTopology_Element, _impl_.custom_params_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::sw::proto::SimpleTopology, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::sw::proto::SimpleTopology, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sw::proto::SimpleTopology, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::sw::proto::SimpleTopology, _impl_.element_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::sw::proto::SemiSequentialTopology_Element, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::sw::proto::SemiSequentialTopology_Element, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sw::proto::SemiSequentialTopology_Element, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::sw::proto::SemiSequentialTopology_Element, _impl_.dependency_),
  PROTOBUF_FIELD_OFFSET(::sw::proto::SemiSequentialTopology_Element, _impl_.custom_params_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::sw::proto::SemiSequentialTopology, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::sw::proto::SemiSequentialTopology, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sw::proto::SemiSequentialTopology, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::sw::proto::SemiSequentialTopology, _impl_.element_),
  PROTOBUF_FIELD_OFFSET(::sw::proto::SemiSequentialTopology, _impl_.custom_params_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::sw::proto::RunnableTopology_Element, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::sw::proto::RunnableTopology_Element, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sw::proto::RunnableTopology_Element, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::sw::proto::RunnableTopology_Element, _impl_.dependency_),
  PROTOBUF_FIELD_OFFSET(::sw::proto::RunnableTopology_Element, _impl_.custom_params_),
  PROTOBUF_FIELD_OFFSET(::sw::proto::RunnableTopology_Element, _impl_.allow_parallel_),
  0,
  ~0u,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::sw::proto::RunnableTopology, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::sw::proto::RunnableTopology, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sw::proto::RunnableTopology, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::sw::proto::RunnableTopology, _impl_.element_),
  PROTOBUF_FIELD_OFFSET(::sw::proto::RunnableTopology, _impl_.custom_params_),
  0,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sw::proto::TopologyConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sw::proto::TopologyConfig, _impl_.module_),
  PROTOBUF_FIELD_OFFSET(::sw::proto::TopologyConfig, _impl_.runnable_topology_),
  PROTOBUF_FIELD_OFFSET(::sw::proto::TopologyConfig, _impl_.minimal_topology_),
  PROTOBUF_FIELD_OFFSET(::sw::proto::TopologyConfig, _impl_.simple_topology_),
  PROTOBUF_FIELD_OFFSET(::sw::proto::TopologyConfig, _impl_.semi_sequential_topology_),
  PROTOBUF_FIELD_OFFSET(::sw::proto::TopologyConfigWithModuleDefinition, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::sw::proto::TopologyConfigWithModuleDefinition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sw::proto::TopologyConfigWithModuleDefinition, _impl_.module_),
  PROTOBUF_FIELD_OFFSET(::sw::proto::TopologyConfigWithModuleDefinition, _impl_.runnable_topology_),
  ~0u,
  0,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::sw::proto::Param)},
  { 10, 19, -1, sizeof(::sw::proto::Module)},
  { 22, 30, -1, sizeof(::sw::proto::MinimalTopology)},
  { 32, 40, -1, sizeof(::sw::proto::SimpleTopology_Element)},
  { 42, 50, -1, sizeof(::sw::proto::SimpleTopology)},
  { 52, 61, -1, sizeof(::sw::proto::SemiSequentialTopology_Element)},
  { 64, 73, -1, sizeof(::sw::proto::SemiSequentialTopology)},
  { 76, 86, -1, sizeof(::sw::proto::RunnableTopology_Element)},
  { 90, 99, -1, sizeof(::sw::proto::RunnableTopology)},
  { 102, -1, -1, sizeof(::sw::proto::TopologyConfig)},
  { 113, 121, -1, sizeof(::sw::proto::TopologyConfigWithModuleDefinition)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::sw::proto::_Param_default_instance_._instance,
  &::sw::proto::_Module_default_instance_._instance,
  &::sw::proto::_MinimalTopology_default_instance_._instance,
  &::sw::proto::_SimpleTopology_Element_default_instance_._instance,
  &::sw::proto::_SimpleTopology_default_instance_._instance,
  &::sw::proto::_SemiSequentialTopology_Element_default_instance_._instance,
  &::sw::proto::_SemiSequentialTopology_default_instance_._instance,
  &::sw::proto::_RunnableTopology_Element_default_instance_._instance,
  &::sw::proto::_RunnableTopology_default_instance_._instance,
  &::sw::proto::_TopologyConfig_default_instance_._instance,
  &::sw::proto::_TopologyConfigWithModuleDefinition_default_instance_._instance,
};

const char descriptor_table_protodef_topology_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025topology_config.proto\022\010sw.proto\"#\n\005Par"
  "am\022\013\n\003key\030\001 \002(\t\022\r\n\005value\030\002 \002(\t\"T\n\006Module"
  "\022\014\n\004name\030\001 \002(\t\022\024\n\014factory_name\030\002 \002(\t\022&\n\r"
  "custom_params\030\003 \003(\0132\017.sw.proto.Param\"0\n\017"
  "MinimalTopology\022\014\n\004name\030\001 \002(\t\022\017\n\007element"
  "\030\002 \003(\t\"\222\001\n\016SimpleTopology\022\014\n\004name\030\001 \002(\t\022"
  "1\n\007element\030\002 \003(\0132 .sw.proto.SimpleTopolo"
  "gy.Element\032\?\n\007Element\022\014\n\004name\030\001 \002(\t\022&\n\rc"
  "ustom_params\030\002 \003(\0132\017.sw.proto.Param\"\336\001\n\026"
  "SemiSequentialTopology\022\014\n\004name\030\001 \002(\t\0229\n\007"
  "element\030\002 \003(\0132(.sw.proto.SemiSequentialT"
  "opology.Element\022&\n\rcustom_params\030\003 \003(\0132\017"
  ".sw.proto.Param\032S\n\007Element\022\014\n\004name\030\001 \002(\t"
  "\022\022\n\ndependency\030\002 \003(\t\022&\n\rcustom_params\030\003 "
  "\003(\0132\017.sw.proto.Param\"\361\001\n\020RunnableTopolog"
  "y\022\014\n\004name\030\001 \002(\t\0223\n\007element\030\002 \003(\0132\".sw.pr"
  "oto.RunnableTopology.Element\022&\n\rcustom_p"
  "arams\030\003 \003(\0132\017.sw.proto.Param\032r\n\007Element\022"
  "\014\n\004name\030\001 \002(\t\022\022\n\ndependency\030\002 \003(\t\022&\n\rcus"
  "tom_params\030\003 \003(\0132\017.sw.proto.Param\022\035\n\016all"
  "ow_parallel\030\004 \001(\010:\005false\"\225\002\n\016TopologyCon"
  "fig\022 \n\006module\030\001 \003(\0132\020.sw.proto.Module\0225\n"
  "\021runnable_topology\030\002 \003(\0132\032.sw.proto.Runn"
  "ableTopology\0223\n\020minimal_topology\030\003 \003(\0132\031"
  ".sw.proto.MinimalTopology\0221\n\017simple_topo"
  "logy\030\004 \003(\0132\030.sw.proto.SimpleTopology\022B\n\030"
  "semi_sequential_topology\030\005 \003(\0132 .sw.prot"
  "o.SemiSequentialTopology\"}\n\"TopologyConf"
  "igWithModuleDefinition\022 \n\006module\030\001 \003(\0132\020"
  ".sw.proto.Module\0225\n\021runnable_topology\030\002 "
  "\002(\0132\032.sw.proto.RunnableTopologyB+\n\'com.x"
  "iaohongshu.service.search.sw.protoP\001"
  ;
static ::_pbi::once_flag descriptor_table_topology_5fconfig_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_topology_5fconfig_2eproto = {
    false, false, 1276, descriptor_table_protodef_topology_5fconfig_2eproto,
    "topology_config.proto",
    &descriptor_table_topology_5fconfig_2eproto_once, nullptr, 0, 11,
    schemas, file_default_instances, TableStruct_topology_5fconfig_2eproto::offsets,
    file_level_metadata_topology_5fconfig_2eproto, file_level_enum_descriptors_topology_5fconfig_2eproto,
    file_level_service_descriptors_topology_5fconfig_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_topology_5fconfig_2eproto_getter() {
  return &descriptor_table_topology_5fconfig_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_topology_5fconfig_2eproto(&descriptor_table_topology_5fconfig_2eproto);
namespace sw {
namespace proto {

// ===================================================================

class Param::_Internal {
 public:
  using HasBits = decltype(std::declval<Param>()._impl_._has_bits_);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

Param::Param(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sw.proto.Param)
}
Param::Param(const Param& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Param* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.key_){}
    , decltype(_impl_.value_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_key()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_value()) {
    _this->_impl_.value_.Set(from._internal_value(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:sw.proto.Param)
}

inline void Param::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.key_){}
    , decltype(_impl_.value_){}
  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Param::~Param() {
  // @@protoc_insertion_point(destructor:sw.proto.Param)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Param::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_.Destroy();
  _impl_.value_.Destroy();
}

void Param::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Param::Clear() {
// @@protoc_insertion_point(message_clear_start:sw.proto.Param)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.value_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Param::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "sw.proto.Param.key");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "sw.proto.Param.value");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Param::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sw.proto.Param)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "sw.proto.Param.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // required string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "sw.proto.Param.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sw.proto.Param)
  return target;
}

size_t Param::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sw.proto.Param)
  size_t total_size = 0;

  if (_internal_has_key()) {
    // required string key = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  if (_internal_has_value()) {
    // required string value = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  return total_size;
}
size_t Param::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sw.proto.Param)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string key = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());

    // required string value = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Param::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Param::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Param::GetClassData() const { return &_class_data_; }


void Param::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Param*>(&to_msg);
  auto& from = static_cast<const Param&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sw.proto.Param)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_key(from._internal_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_value(from._internal_value());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Param::CopyFrom(const Param& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sw.proto.Param)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Param::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void Param::InternalSwap(Param* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_, lhs_arena,
      &other->_impl_.value_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Param::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_topology_5fconfig_2eproto_getter, &descriptor_table_topology_5fconfig_2eproto_once,
      file_level_metadata_topology_5fconfig_2eproto[0]);
}

// ===================================================================

class Module::_Internal {
 public:
  using HasBits = decltype(std::declval<Module>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_factory_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

Module::Module(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sw.proto.Module)
}
Module::Module(const Module& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Module* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.custom_params_){from._impl_.custom_params_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.factory_name_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.factory_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.factory_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_factory_name()) {
    _this->_impl_.factory_name_.Set(from._internal_factory_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:sw.proto.Module)
}

inline void Module::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.custom_params_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.factory_name_){}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.factory_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.factory_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Module::~Module() {
  // @@protoc_insertion_point(destructor:sw.proto.Module)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Module::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.custom_params_.~RepeatedPtrField();
  _impl_.name_.Destroy();
  _impl_.factory_name_.Destroy();
}

void Module::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Module::Clear() {
// @@protoc_insertion_point(message_clear_start:sw.proto.Module)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.custom_params_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.factory_name_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Module::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "sw.proto.Module.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string factory_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_factory_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "sw.proto.Module.factory_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .sw.proto.Param custom_params = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_custom_params(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Module::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sw.proto.Module)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "sw.proto.Module.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // required string factory_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_factory_name().data(), static_cast<int>(this->_internal_factory_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "sw.proto.Module.factory_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_factory_name(), target);
  }

  // repeated .sw.proto.Param custom_params = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_custom_params_size()); i < n; i++) {
    const auto& repfield = this->_internal_custom_params(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sw.proto.Module)
  return target;
}

size_t Module::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sw.proto.Module)
  size_t total_size = 0;

  if (_internal_has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (_internal_has_factory_name()) {
    // required string factory_name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_factory_name());
  }

  return total_size;
}
size_t Module::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sw.proto.Module)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required string factory_name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_factory_name());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sw.proto.Param custom_params = 3;
  total_size += 1UL * this->_internal_custom_params_size();
  for (const auto& msg : this->_impl_.custom_params_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Module::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Module::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Module::GetClassData() const { return &_class_data_; }


void Module::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Module*>(&to_msg);
  auto& from = static_cast<const Module&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sw.proto.Module)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.custom_params_.MergeFrom(from._impl_.custom_params_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_factory_name(from._internal_factory_name());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Module::CopyFrom(const Module& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sw.proto.Module)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Module::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.custom_params_))
    return false;
  return true;
}

void Module::InternalSwap(Module* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.custom_params_.InternalSwap(&other->_impl_.custom_params_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.factory_name_, lhs_arena,
      &other->_impl_.factory_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Module::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_topology_5fconfig_2eproto_getter, &descriptor_table_topology_5fconfig_2eproto_once,
      file_level_metadata_topology_5fconfig_2eproto[1]);
}

// ===================================================================

class MinimalTopology::_Internal {
 public:
  using HasBits = decltype(std::declval<MinimalTopology>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

MinimalTopology::MinimalTopology(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sw.proto.MinimalTopology)
}
MinimalTopology::MinimalTopology(const MinimalTopology& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MinimalTopology* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.element_){from._impl_.element_}
    , decltype(_impl_.name_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:sw.proto.MinimalTopology)
}

inline void MinimalTopology::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.element_){arena}
    , decltype(_impl_.name_){}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MinimalTopology::~MinimalTopology() {
  // @@protoc_insertion_point(destructor:sw.proto.MinimalTopology)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MinimalTopology::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.element_.~RepeatedPtrField();
  _impl_.name_.Destroy();
}

void MinimalTopology::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MinimalTopology::Clear() {
// @@protoc_insertion_point(message_clear_start:sw.proto.MinimalTopology)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.element_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MinimalTopology::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "sw.proto.MinimalTopology.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated string element = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_element();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "sw.proto.MinimalTopology.element");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MinimalTopology::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sw.proto.MinimalTopology)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "sw.proto.MinimalTopology.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated string element = 2;
  for (int i = 0, n = this->_internal_element_size(); i < n; i++) {
    const auto& s = this->_internal_element(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "sw.proto.MinimalTopology.element");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sw.proto.MinimalTopology)
  return target;
}

size_t MinimalTopology::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sw.proto.MinimalTopology)
  size_t total_size = 0;

  // required string name = 1;
  if (_internal_has_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string element = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.element_.size());
  for (int i = 0, n = _impl_.element_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.element_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MinimalTopology::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MinimalTopology::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MinimalTopology::GetClassData() const { return &_class_data_; }


void MinimalTopology::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MinimalTopology*>(&to_msg);
  auto& from = static_cast<const MinimalTopology&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sw.proto.MinimalTopology)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.element_.MergeFrom(from._impl_.element_);
  if (from._internal_has_name()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MinimalTopology::CopyFrom(const MinimalTopology& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sw.proto.MinimalTopology)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MinimalTopology::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void MinimalTopology::InternalSwap(MinimalTopology* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.element_.InternalSwap(&other->_impl_.element_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata MinimalTopology::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_topology_5fconfig_2eproto_getter, &descriptor_table_topology_5fconfig_2eproto_once,
      file_level_metadata_topology_5fconfig_2eproto[2]);
}

// ===================================================================

class SimpleTopology_Element::_Internal {
 public:
  using HasBits = decltype(std::declval<SimpleTopology_Element>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

SimpleTopology_Element::SimpleTopology_Element(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sw.proto.SimpleTopology.Element)
}
SimpleTopology_Element::SimpleTopology_Element(const SimpleTopology_Element& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SimpleTopology_Element* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.custom_params_){from._impl_.custom_params_}
    , decltype(_impl_.name_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:sw.proto.SimpleTopology.Element)
}

inline void SimpleTopology_Element::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.custom_params_){arena}
    , decltype(_impl_.name_){}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SimpleTopology_Element::~SimpleTopology_Element() {
  // @@protoc_insertion_point(destructor:sw.proto.SimpleTopology.Element)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SimpleTopology_Element::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.custom_params_.~RepeatedPtrField();
  _impl_.name_.Destroy();
}

void SimpleTopology_Element::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SimpleTopology_Element::Clear() {
// @@protoc_insertion_point(message_clear_start:sw.proto.SimpleTopology.Element)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.custom_params_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimpleTopology_Element::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "sw.proto.SimpleTopology.Element.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .sw.proto.Param custom_params = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_custom_params(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SimpleTopology_Element::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sw.proto.SimpleTopology.Element)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "sw.proto.SimpleTopology.Element.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated .sw.proto.Param custom_params = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_custom_params_size()); i < n; i++) {
    const auto& repfield = this->_internal_custom_params(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sw.proto.SimpleTopology.Element)
  return target;
}

size_t SimpleTopology_Element::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sw.proto.SimpleTopology.Element)
  size_t total_size = 0;

  // required string name = 1;
  if (_internal_has_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sw.proto.Param custom_params = 2;
  total_size += 1UL * this->_internal_custom_params_size();
  for (const auto& msg : this->_impl_.custom_params_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SimpleTopology_Element::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SimpleTopology_Element::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SimpleTopology_Element::GetClassData() const { return &_class_data_; }


void SimpleTopology_Element::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SimpleTopology_Element*>(&to_msg);
  auto& from = static_cast<const SimpleTopology_Element&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sw.proto.SimpleTopology.Element)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.custom_params_.MergeFrom(from._impl_.custom_params_);
  if (from._internal_has_name()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SimpleTopology_Element::CopyFrom(const SimpleTopology_Element& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sw.proto.SimpleTopology.Element)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleTopology_Element::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.custom_params_))
    return false;
  return true;
}

void SimpleTopology_Element::InternalSwap(SimpleTopology_Element* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.custom_params_.InternalSwap(&other->_impl_.custom_params_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SimpleTopology_Element::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_topology_5fconfig_2eproto_getter, &descriptor_table_topology_5fconfig_2eproto_once,
      file_level_metadata_topology_5fconfig_2eproto[3]);
}

// ===================================================================

class SimpleTopology::_Internal {
 public:
  using HasBits = decltype(std::declval<SimpleTopology>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

SimpleTopology::SimpleTopology(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sw.proto.SimpleTopology)
}
SimpleTopology::SimpleTopology(const SimpleTopology& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SimpleTopology* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.element_){from._impl_.element_}
    , decltype(_impl_.name_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:sw.proto.SimpleTopology)
}

inline void SimpleTopology::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.element_){arena}
    , decltype(_impl_.name_){}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SimpleTopology::~SimpleTopology() {
  // @@protoc_insertion_point(destructor:sw.proto.SimpleTopology)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SimpleTopology::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.element_.~RepeatedPtrField();
  _impl_.name_.Destroy();
}

void SimpleTopology::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SimpleTopology::Clear() {
// @@protoc_insertion_point(message_clear_start:sw.proto.SimpleTopology)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.element_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimpleTopology::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "sw.proto.SimpleTopology.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .sw.proto.SimpleTopology.Element element = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_element(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SimpleTopology::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sw.proto.SimpleTopology)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "sw.proto.SimpleTopology.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated .sw.proto.SimpleTopology.Element element = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_element_size()); i < n; i++) {
    const auto& repfield = this->_internal_element(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sw.proto.SimpleTopology)
  return target;
}

size_t SimpleTopology::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sw.proto.SimpleTopology)
  size_t total_size = 0;

  // required string name = 1;
  if (_internal_has_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sw.proto.SimpleTopology.Element element = 2;
  total_size += 1UL * this->_internal_element_size();
  for (const auto& msg : this->_impl_.element_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SimpleTopology::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SimpleTopology::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SimpleTopology::GetClassData() const { return &_class_data_; }


void SimpleTopology::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SimpleTopology*>(&to_msg);
  auto& from = static_cast<const SimpleTopology&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sw.proto.SimpleTopology)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.element_.MergeFrom(from._impl_.element_);
  if (from._internal_has_name()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SimpleTopology::CopyFrom(const SimpleTopology& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sw.proto.SimpleTopology)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleTopology::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.element_))
    return false;
  return true;
}

void SimpleTopology::InternalSwap(SimpleTopology* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.element_.InternalSwap(&other->_impl_.element_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SimpleTopology::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_topology_5fconfig_2eproto_getter, &descriptor_table_topology_5fconfig_2eproto_once,
      file_level_metadata_topology_5fconfig_2eproto[4]);
}

// ===================================================================

class SemiSequentialTopology_Element::_Internal {
 public:
  using HasBits = decltype(std::declval<SemiSequentialTopology_Element>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

SemiSequentialTopology_Element::SemiSequentialTopology_Element(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sw.proto.SemiSequentialTopology.Element)
}
SemiSequentialTopology_Element::SemiSequentialTopology_Element(const SemiSequentialTopology_Element& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SemiSequentialTopology_Element* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.dependency_){from._impl_.dependency_}
    , decltype(_impl_.custom_params_){from._impl_.custom_params_}
    , decltype(_impl_.name_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:sw.proto.SemiSequentialTopology.Element)
}

inline void SemiSequentialTopology_Element::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.dependency_){arena}
    , decltype(_impl_.custom_params_){arena}
    , decltype(_impl_.name_){}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SemiSequentialTopology_Element::~SemiSequentialTopology_Element() {
  // @@protoc_insertion_point(destructor:sw.proto.SemiSequentialTopology.Element)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SemiSequentialTopology_Element::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.dependency_.~RepeatedPtrField();
  _impl_.custom_params_.~RepeatedPtrField();
  _impl_.name_.Destroy();
}

void SemiSequentialTopology_Element::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SemiSequentialTopology_Element::Clear() {
// @@protoc_insertion_point(message_clear_start:sw.proto.SemiSequentialTopology.Element)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dependency_.Clear();
  _impl_.custom_params_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SemiSequentialTopology_Element::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "sw.proto.SemiSequentialTopology.Element.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated string dependency = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_dependency();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "sw.proto.SemiSequentialTopology.Element.dependency");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .sw.proto.Param custom_params = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_custom_params(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SemiSequentialTopology_Element::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sw.proto.SemiSequentialTopology.Element)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "sw.proto.SemiSequentialTopology.Element.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated string dependency = 2;
  for (int i = 0, n = this->_internal_dependency_size(); i < n; i++) {
    const auto& s = this->_internal_dependency(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "sw.proto.SemiSequentialTopology.Element.dependency");
    target = stream->WriteString(2, s, target);
  }

  // repeated .sw.proto.Param custom_params = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_custom_params_size()); i < n; i++) {
    const auto& repfield = this->_internal_custom_params(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sw.proto.SemiSequentialTopology.Element)
  return target;
}

size_t SemiSequentialTopology_Element::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sw.proto.SemiSequentialTopology.Element)
  size_t total_size = 0;

  // required string name = 1;
  if (_internal_has_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string dependency = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.dependency_.size());
  for (int i = 0, n = _impl_.dependency_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.dependency_.Get(i));
  }

  // repeated .sw.proto.Param custom_params = 3;
  total_size += 1UL * this->_internal_custom_params_size();
  for (const auto& msg : this->_impl_.custom_params_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SemiSequentialTopology_Element::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SemiSequentialTopology_Element::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SemiSequentialTopology_Element::GetClassData() const { return &_class_data_; }


void SemiSequentialTopology_Element::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SemiSequentialTopology_Element*>(&to_msg);
  auto& from = static_cast<const SemiSequentialTopology_Element&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sw.proto.SemiSequentialTopology.Element)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.dependency_.MergeFrom(from._impl_.dependency_);
  _this->_impl_.custom_params_.MergeFrom(from._impl_.custom_params_);
  if (from._internal_has_name()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SemiSequentialTopology_Element::CopyFrom(const SemiSequentialTopology_Element& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sw.proto.SemiSequentialTopology.Element)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SemiSequentialTopology_Element::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.custom_params_))
    return false;
  return true;
}

void SemiSequentialTopology_Element::InternalSwap(SemiSequentialTopology_Element* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.dependency_.InternalSwap(&other->_impl_.dependency_);
  _impl_.custom_params_.InternalSwap(&other->_impl_.custom_params_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SemiSequentialTopology_Element::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_topology_5fconfig_2eproto_getter, &descriptor_table_topology_5fconfig_2eproto_once,
      file_level_metadata_topology_5fconfig_2eproto[5]);
}

// ===================================================================

class SemiSequentialTopology::_Internal {
 public:
  using HasBits = decltype(std::declval<SemiSequentialTopology>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

SemiSequentialTopology::SemiSequentialTopology(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sw.proto.SemiSequentialTopology)
}
SemiSequentialTopology::SemiSequentialTopology(const SemiSequentialTopology& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SemiSequentialTopology* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.element_){from._impl_.element_}
    , decltype(_impl_.custom_params_){from._impl_.custom_params_}
    , decltype(_impl_.name_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:sw.proto.SemiSequentialTopology)
}

inline void SemiSequentialTopology::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.element_){arena}
    , decltype(_impl_.custom_params_){arena}
    , decltype(_impl_.name_){}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SemiSequentialTopology::~SemiSequentialTopology() {
  // @@protoc_insertion_point(destructor:sw.proto.SemiSequentialTopology)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SemiSequentialTopology::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.element_.~RepeatedPtrField();
  _impl_.custom_params_.~RepeatedPtrField();
  _impl_.name_.Destroy();
}

void SemiSequentialTopology::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SemiSequentialTopology::Clear() {
// @@protoc_insertion_point(message_clear_start:sw.proto.SemiSequentialTopology)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.element_.Clear();
  _impl_.custom_params_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SemiSequentialTopology::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "sw.proto.SemiSequentialTopology.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .sw.proto.SemiSequentialTopology.Element element = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_element(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .sw.proto.Param custom_params = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_custom_params(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SemiSequentialTopology::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sw.proto.SemiSequentialTopology)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "sw.proto.SemiSequentialTopology.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated .sw.proto.SemiSequentialTopology.Element element = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_element_size()); i < n; i++) {
    const auto& repfield = this->_internal_element(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .sw.proto.Param custom_params = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_custom_params_size()); i < n; i++) {
    const auto& repfield = this->_internal_custom_params(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sw.proto.SemiSequentialTopology)
  return target;
}

size_t SemiSequentialTopology::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sw.proto.SemiSequentialTopology)
  size_t total_size = 0;

  // required string name = 1;
  if (_internal_has_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sw.proto.SemiSequentialTopology.Element element = 2;
  total_size += 1UL * this->_internal_element_size();
  for (const auto& msg : this->_impl_.element_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .sw.proto.Param custom_params = 3;
  total_size += 1UL * this->_internal_custom_params_size();
  for (const auto& msg : this->_impl_.custom_params_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SemiSequentialTopology::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SemiSequentialTopology::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SemiSequentialTopology::GetClassData() const { return &_class_data_; }


void SemiSequentialTopology::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SemiSequentialTopology*>(&to_msg);
  auto& from = static_cast<const SemiSequentialTopology&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sw.proto.SemiSequentialTopology)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.element_.MergeFrom(from._impl_.element_);
  _this->_impl_.custom_params_.MergeFrom(from._impl_.custom_params_);
  if (from._internal_has_name()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SemiSequentialTopology::CopyFrom(const SemiSequentialTopology& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sw.proto.SemiSequentialTopology)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SemiSequentialTopology::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.element_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.custom_params_))
    return false;
  return true;
}

void SemiSequentialTopology::InternalSwap(SemiSequentialTopology* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.element_.InternalSwap(&other->_impl_.element_);
  _impl_.custom_params_.InternalSwap(&other->_impl_.custom_params_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SemiSequentialTopology::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_topology_5fconfig_2eproto_getter, &descriptor_table_topology_5fconfig_2eproto_once,
      file_level_metadata_topology_5fconfig_2eproto[6]);
}

// ===================================================================

class RunnableTopology_Element::_Internal {
 public:
  using HasBits = decltype(std::declval<RunnableTopology_Element>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_allow_parallel(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

RunnableTopology_Element::RunnableTopology_Element(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sw.proto.RunnableTopology.Element)
}
RunnableTopology_Element::RunnableTopology_Element(const RunnableTopology_Element& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RunnableTopology_Element* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.dependency_){from._impl_.dependency_}
    , decltype(_impl_.custom_params_){from._impl_.custom_params_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.allow_parallel_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.allow_parallel_ = from._impl_.allow_parallel_;
  // @@protoc_insertion_point(copy_constructor:sw.proto.RunnableTopology.Element)
}

inline void RunnableTopology_Element::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.dependency_){arena}
    , decltype(_impl_.custom_params_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.allow_parallel_){false}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RunnableTopology_Element::~RunnableTopology_Element() {
  // @@protoc_insertion_point(destructor:sw.proto.RunnableTopology.Element)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RunnableTopology_Element::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.dependency_.~RepeatedPtrField();
  _impl_.custom_params_.~RepeatedPtrField();
  _impl_.name_.Destroy();
}

void RunnableTopology_Element::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RunnableTopology_Element::Clear() {
// @@protoc_insertion_point(message_clear_start:sw.proto.RunnableTopology.Element)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dependency_.Clear();
  _impl_.custom_params_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  _impl_.allow_parallel_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RunnableTopology_Element::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "sw.proto.RunnableTopology.Element.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated string dependency = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_dependency();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "sw.proto.RunnableTopology.Element.dependency");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .sw.proto.Param custom_params = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_custom_params(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool allow_parallel = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_allow_parallel(&has_bits);
          _impl_.allow_parallel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RunnableTopology_Element::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sw.proto.RunnableTopology.Element)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "sw.proto.RunnableTopology.Element.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated string dependency = 2;
  for (int i = 0, n = this->_internal_dependency_size(); i < n; i++) {
    const auto& s = this->_internal_dependency(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "sw.proto.RunnableTopology.Element.dependency");
    target = stream->WriteString(2, s, target);
  }

  // repeated .sw.proto.Param custom_params = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_custom_params_size()); i < n; i++) {
    const auto& repfield = this->_internal_custom_params(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bool allow_parallel = 4 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_allow_parallel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sw.proto.RunnableTopology.Element)
  return target;
}

size_t RunnableTopology_Element::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sw.proto.RunnableTopology.Element)
  size_t total_size = 0;

  // required string name = 1;
  if (_internal_has_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string dependency = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.dependency_.size());
  for (int i = 0, n = _impl_.dependency_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.dependency_.Get(i));
  }

  // repeated .sw.proto.Param custom_params = 3;
  total_size += 1UL * this->_internal_custom_params_size();
  for (const auto& msg : this->_impl_.custom_params_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional bool allow_parallel = 4 [default = false];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RunnableTopology_Element::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RunnableTopology_Element::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RunnableTopology_Element::GetClassData() const { return &_class_data_; }


void RunnableTopology_Element::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RunnableTopology_Element*>(&to_msg);
  auto& from = static_cast<const RunnableTopology_Element&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sw.proto.RunnableTopology.Element)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.dependency_.MergeFrom(from._impl_.dependency_);
  _this->_impl_.custom_params_.MergeFrom(from._impl_.custom_params_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.allow_parallel_ = from._impl_.allow_parallel_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RunnableTopology_Element::CopyFrom(const RunnableTopology_Element& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sw.proto.RunnableTopology.Element)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunnableTopology_Element::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.custom_params_))
    return false;
  return true;
}

void RunnableTopology_Element::InternalSwap(RunnableTopology_Element* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.dependency_.InternalSwap(&other->_impl_.dependency_);
  _impl_.custom_params_.InternalSwap(&other->_impl_.custom_params_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.allow_parallel_, other->_impl_.allow_parallel_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RunnableTopology_Element::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_topology_5fconfig_2eproto_getter, &descriptor_table_topology_5fconfig_2eproto_once,
      file_level_metadata_topology_5fconfig_2eproto[7]);
}

// ===================================================================

class RunnableTopology::_Internal {
 public:
  using HasBits = decltype(std::declval<RunnableTopology>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

RunnableTopology::RunnableTopology(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sw.proto.RunnableTopology)
}
RunnableTopology::RunnableTopology(const RunnableTopology& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RunnableTopology* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.element_){from._impl_.element_}
    , decltype(_impl_.custom_params_){from._impl_.custom_params_}
    , decltype(_impl_.name_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:sw.proto.RunnableTopology)
}

inline void RunnableTopology::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.element_){arena}
    , decltype(_impl_.custom_params_){arena}
    , decltype(_impl_.name_){}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RunnableTopology::~RunnableTopology() {
  // @@protoc_insertion_point(destructor:sw.proto.RunnableTopology)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RunnableTopology::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.element_.~RepeatedPtrField();
  _impl_.custom_params_.~RepeatedPtrField();
  _impl_.name_.Destroy();
}

void RunnableTopology::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RunnableTopology::Clear() {
// @@protoc_insertion_point(message_clear_start:sw.proto.RunnableTopology)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.element_.Clear();
  _impl_.custom_params_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RunnableTopology::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "sw.proto.RunnableTopology.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .sw.proto.RunnableTopology.Element element = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_element(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .sw.proto.Param custom_params = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_custom_params(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RunnableTopology::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sw.proto.RunnableTopology)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "sw.proto.RunnableTopology.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated .sw.proto.RunnableTopology.Element element = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_element_size()); i < n; i++) {
    const auto& repfield = this->_internal_element(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .sw.proto.Param custom_params = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_custom_params_size()); i < n; i++) {
    const auto& repfield = this->_internal_custom_params(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sw.proto.RunnableTopology)
  return target;
}

size_t RunnableTopology::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sw.proto.RunnableTopology)
  size_t total_size = 0;

  // required string name = 1;
  if (_internal_has_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sw.proto.RunnableTopology.Element element = 2;
  total_size += 1UL * this->_internal_element_size();
  for (const auto& msg : this->_impl_.element_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .sw.proto.Param custom_params = 3;
  total_size += 1UL * this->_internal_custom_params_size();
  for (const auto& msg : this->_impl_.custom_params_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RunnableTopology::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RunnableTopology::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RunnableTopology::GetClassData() const { return &_class_data_; }


void RunnableTopology::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RunnableTopology*>(&to_msg);
  auto& from = static_cast<const RunnableTopology&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sw.proto.RunnableTopology)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.element_.MergeFrom(from._impl_.element_);
  _this->_impl_.custom_params_.MergeFrom(from._impl_.custom_params_);
  if (from._internal_has_name()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RunnableTopology::CopyFrom(const RunnableTopology& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sw.proto.RunnableTopology)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunnableTopology::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.element_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.custom_params_))
    return false;
  return true;
}

void RunnableTopology::InternalSwap(RunnableTopology* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.element_.InternalSwap(&other->_impl_.element_);
  _impl_.custom_params_.InternalSwap(&other->_impl_.custom_params_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata RunnableTopology::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_topology_5fconfig_2eproto_getter, &descriptor_table_topology_5fconfig_2eproto_once,
      file_level_metadata_topology_5fconfig_2eproto[8]);
}

// ===================================================================

class TopologyConfig::_Internal {
 public:
};

TopologyConfig::TopologyConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sw.proto.TopologyConfig)
}
TopologyConfig::TopologyConfig(const TopologyConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TopologyConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.module_){from._impl_.module_}
    , decltype(_impl_.runnable_topology_){from._impl_.runnable_topology_}
    , decltype(_impl_.minimal_topology_){from._impl_.minimal_topology_}
    , decltype(_impl_.simple_topology_){from._impl_.simple_topology_}
    , decltype(_impl_.semi_sequential_topology_){from._impl_.semi_sequential_topology_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sw.proto.TopologyConfig)
}

inline void TopologyConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.module_){arena}
    , decltype(_impl_.runnable_topology_){arena}
    , decltype(_impl_.minimal_topology_){arena}
    , decltype(_impl_.simple_topology_){arena}
    , decltype(_impl_.semi_sequential_topology_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TopologyConfig::~TopologyConfig() {
  // @@protoc_insertion_point(destructor:sw.proto.TopologyConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TopologyConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.module_.~RepeatedPtrField();
  _impl_.runnable_topology_.~RepeatedPtrField();
  _impl_.minimal_topology_.~RepeatedPtrField();
  _impl_.simple_topology_.~RepeatedPtrField();
  _impl_.semi_sequential_topology_.~RepeatedPtrField();
}

void TopologyConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TopologyConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:sw.proto.TopologyConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.module_.Clear();
  _impl_.runnable_topology_.Clear();
  _impl_.minimal_topology_.Clear();
  _impl_.simple_topology_.Clear();
  _impl_.semi_sequential_topology_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TopologyConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .sw.proto.Module module = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_module(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .sw.proto.RunnableTopology runnable_topology = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_runnable_topology(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .sw.proto.MinimalTopology minimal_topology = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_minimal_topology(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .sw.proto.SimpleTopology simple_topology = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_simple_topology(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .sw.proto.SemiSequentialTopology semi_sequential_topology = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_semi_sequential_topology(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TopologyConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sw.proto.TopologyConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sw.proto.Module module = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_module_size()); i < n; i++) {
    const auto& repfield = this->_internal_module(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .sw.proto.RunnableTopology runnable_topology = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_runnable_topology_size()); i < n; i++) {
    const auto& repfield = this->_internal_runnable_topology(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .sw.proto.MinimalTopology minimal_topology = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_minimal_topology_size()); i < n; i++) {
    const auto& repfield = this->_internal_minimal_topology(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .sw.proto.SimpleTopology simple_topology = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_simple_topology_size()); i < n; i++) {
    const auto& repfield = this->_internal_simple_topology(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .sw.proto.SemiSequentialTopology semi_sequential_topology = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_semi_sequential_topology_size()); i < n; i++) {
    const auto& repfield = this->_internal_semi_sequential_topology(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sw.proto.TopologyConfig)
  return target;
}

size_t TopologyConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sw.proto.TopologyConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sw.proto.Module module = 1;
  total_size += 1UL * this->_internal_module_size();
  for (const auto& msg : this->_impl_.module_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .sw.proto.RunnableTopology runnable_topology = 2;
  total_size += 1UL * this->_internal_runnable_topology_size();
  for (const auto& msg : this->_impl_.runnable_topology_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .sw.proto.MinimalTopology minimal_topology = 3;
  total_size += 1UL * this->_internal_minimal_topology_size();
  for (const auto& msg : this->_impl_.minimal_topology_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .sw.proto.SimpleTopology simple_topology = 4;
  total_size += 1UL * this->_internal_simple_topology_size();
  for (const auto& msg : this->_impl_.simple_topology_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .sw.proto.SemiSequentialTopology semi_sequential_topology = 5;
  total_size += 1UL * this->_internal_semi_sequential_topology_size();
  for (const auto& msg : this->_impl_.semi_sequential_topology_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TopologyConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TopologyConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TopologyConfig::GetClassData() const { return &_class_data_; }


void TopologyConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TopologyConfig*>(&to_msg);
  auto& from = static_cast<const TopologyConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sw.proto.TopologyConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.module_.MergeFrom(from._impl_.module_);
  _this->_impl_.runnable_topology_.MergeFrom(from._impl_.runnable_topology_);
  _this->_impl_.minimal_topology_.MergeFrom(from._impl_.minimal_topology_);
  _this->_impl_.simple_topology_.MergeFrom(from._impl_.simple_topology_);
  _this->_impl_.semi_sequential_topology_.MergeFrom(from._impl_.semi_sequential_topology_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TopologyConfig::CopyFrom(const TopologyConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sw.proto.TopologyConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopologyConfig::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.module_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.runnable_topology_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.minimal_topology_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.simple_topology_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.semi_sequential_topology_))
    return false;
  return true;
}

void TopologyConfig::InternalSwap(TopologyConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.module_.InternalSwap(&other->_impl_.module_);
  _impl_.runnable_topology_.InternalSwap(&other->_impl_.runnable_topology_);
  _impl_.minimal_topology_.InternalSwap(&other->_impl_.minimal_topology_);
  _impl_.simple_topology_.InternalSwap(&other->_impl_.simple_topology_);
  _impl_.semi_sequential_topology_.InternalSwap(&other->_impl_.semi_sequential_topology_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TopologyConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_topology_5fconfig_2eproto_getter, &descriptor_table_topology_5fconfig_2eproto_once,
      file_level_metadata_topology_5fconfig_2eproto[9]);
}

// ===================================================================

class TopologyConfigWithModuleDefinition::_Internal {
 public:
  using HasBits = decltype(std::declval<TopologyConfigWithModuleDefinition>()._impl_._has_bits_);
  static const ::sw::proto::RunnableTopology& runnable_topology(const TopologyConfigWithModuleDefinition* msg);
  static void set_has_runnable_topology(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::sw::proto::RunnableTopology&
TopologyConfigWithModuleDefinition::_Internal::runnable_topology(const TopologyConfigWithModuleDefinition* msg) {
  return *msg->_impl_.runnable_topology_;
}
TopologyConfigWithModuleDefinition::TopologyConfigWithModuleDefinition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sw.proto.TopologyConfigWithModuleDefinition)
}
TopologyConfigWithModuleDefinition::TopologyConfigWithModuleDefinition(const TopologyConfigWithModuleDefinition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TopologyConfigWithModuleDefinition* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.module_){from._impl_.module_}
    , decltype(_impl_.runnable_topology_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_runnable_topology()) {
    _this->_impl_.runnable_topology_ = new ::sw::proto::RunnableTopology(*from._impl_.runnable_topology_);
  }
  // @@protoc_insertion_point(copy_constructor:sw.proto.TopologyConfigWithModuleDefinition)
}

inline void TopologyConfigWithModuleDefinition::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.module_){arena}
    , decltype(_impl_.runnable_topology_){nullptr}
  };
}

TopologyConfigWithModuleDefinition::~TopologyConfigWithModuleDefinition() {
  // @@protoc_insertion_point(destructor:sw.proto.TopologyConfigWithModuleDefinition)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TopologyConfigWithModuleDefinition::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.module_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.runnable_topology_;
}

void TopologyConfigWithModuleDefinition::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TopologyConfigWithModuleDefinition::Clear() {
// @@protoc_insertion_point(message_clear_start:sw.proto.TopologyConfigWithModuleDefinition)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.module_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.runnable_topology_ != nullptr);
    _impl_.runnable_topology_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TopologyConfigWithModuleDefinition::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .sw.proto.Module module = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_module(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // required .sw.proto.RunnableTopology runnable_topology = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_runnable_topology(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TopologyConfigWithModuleDefinition::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sw.proto.TopologyConfigWithModuleDefinition)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sw.proto.Module module = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_module_size()); i < n; i++) {
    const auto& repfield = this->_internal_module(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // required .sw.proto.RunnableTopology runnable_topology = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::runnable_topology(this),
        _Internal::runnable_topology(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sw.proto.TopologyConfigWithModuleDefinition)
  return target;
}

size_t TopologyConfigWithModuleDefinition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sw.proto.TopologyConfigWithModuleDefinition)
  size_t total_size = 0;

  // required .sw.proto.RunnableTopology runnable_topology = 2;
  if (_internal_has_runnable_topology()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.runnable_topology_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sw.proto.Module module = 1;
  total_size += 1UL * this->_internal_module_size();
  for (const auto& msg : this->_impl_.module_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TopologyConfigWithModuleDefinition::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TopologyConfigWithModuleDefinition::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TopologyConfigWithModuleDefinition::GetClassData() const { return &_class_data_; }


void TopologyConfigWithModuleDefinition::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TopologyConfigWithModuleDefinition*>(&to_msg);
  auto& from = static_cast<const TopologyConfigWithModuleDefinition&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sw.proto.TopologyConfigWithModuleDefinition)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.module_.MergeFrom(from._impl_.module_);
  if (from._internal_has_runnable_topology()) {
    _this->_internal_mutable_runnable_topology()->::sw::proto::RunnableTopology::MergeFrom(
        from._internal_runnable_topology());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TopologyConfigWithModuleDefinition::CopyFrom(const TopologyConfigWithModuleDefinition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sw.proto.TopologyConfigWithModuleDefinition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopologyConfigWithModuleDefinition::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.module_))
    return false;
  if (_internal_has_runnable_topology()) {
    if (!_impl_.runnable_topology_->IsInitialized()) return false;
  }
  return true;
}

void TopologyConfigWithModuleDefinition::InternalSwap(TopologyConfigWithModuleDefinition* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.module_.InternalSwap(&other->_impl_.module_);
  swap(_impl_.runnable_topology_, other->_impl_.runnable_topology_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TopologyConfigWithModuleDefinition::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_topology_5fconfig_2eproto_getter, &descriptor_table_topology_5fconfig_2eproto_once,
      file_level_metadata_topology_5fconfig_2eproto[10]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace sw
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sw::proto::Param*
Arena::CreateMaybeMessage< ::sw::proto::Param >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sw::proto::Param >(arena);
}
template<> PROTOBUF_NOINLINE ::sw::proto::Module*
Arena::CreateMaybeMessage< ::sw::proto::Module >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sw::proto::Module >(arena);
}
template<> PROTOBUF_NOINLINE ::sw::proto::MinimalTopology*
Arena::CreateMaybeMessage< ::sw::proto::MinimalTopology >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sw::proto::MinimalTopology >(arena);
}
template<> PROTOBUF_NOINLINE ::sw::proto::SimpleTopology_Element*
Arena::CreateMaybeMessage< ::sw::proto::SimpleTopology_Element >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sw::proto::SimpleTopology_Element >(arena);
}
template<> PROTOBUF_NOINLINE ::sw::proto::SimpleTopology*
Arena::CreateMaybeMessage< ::sw::proto::SimpleTopology >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sw::proto::SimpleTopology >(arena);
}
template<> PROTOBUF_NOINLINE ::sw::proto::SemiSequentialTopology_Element*
Arena::CreateMaybeMessage< ::sw::proto::SemiSequentialTopology_Element >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sw::proto::SemiSequentialTopology_Element >(arena);
}
template<> PROTOBUF_NOINLINE ::sw::proto::SemiSequentialTopology*
Arena::CreateMaybeMessage< ::sw::proto::SemiSequentialTopology >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sw::proto::SemiSequentialTopology >(arena);
}
template<> PROTOBUF_NOINLINE ::sw::proto::RunnableTopology_Element*
Arena::CreateMaybeMessage< ::sw::proto::RunnableTopology_Element >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sw::proto::RunnableTopology_Element >(arena);
}
template<> PROTOBUF_NOINLINE ::sw::proto::RunnableTopology*
Arena::CreateMaybeMessage< ::sw::proto::RunnableTopology >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sw::proto::RunnableTopology >(arena);
}
template<> PROTOBUF_NOINLINE ::sw::proto::TopologyConfig*
Arena::CreateMaybeMessage< ::sw::proto::TopologyConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sw::proto::TopologyConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::sw::proto::TopologyConfigWithModuleDefinition*
Arena::CreateMaybeMessage< ::sw::proto::TopologyConfigWithModuleDefinition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sw::proto::TopologyConfigWithModuleDefinition >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

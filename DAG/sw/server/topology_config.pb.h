// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: topology_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_topology_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_topology_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_topology_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_topology_5fconfig_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_topology_5fconfig_2eproto;
namespace sw {
namespace proto {
class MinimalTopology;
struct MinimalTopologyDefaultTypeInternal;
extern MinimalTopologyDefaultTypeInternal _MinimalTopology_default_instance_;
class Module;
struct ModuleDefaultTypeInternal;
extern ModuleDefaultTypeInternal _Module_default_instance_;
class Param;
struct ParamDefaultTypeInternal;
extern ParamDefaultTypeInternal _Param_default_instance_;
class RunnableTopology;
struct RunnableTopologyDefaultTypeInternal;
extern RunnableTopologyDefaultTypeInternal _RunnableTopology_default_instance_;
class RunnableTopology_Element;
struct RunnableTopology_ElementDefaultTypeInternal;
extern RunnableTopology_ElementDefaultTypeInternal _RunnableTopology_Element_default_instance_;
class SemiSequentialTopology;
struct SemiSequentialTopologyDefaultTypeInternal;
extern SemiSequentialTopologyDefaultTypeInternal _SemiSequentialTopology_default_instance_;
class SemiSequentialTopology_Element;
struct SemiSequentialTopology_ElementDefaultTypeInternal;
extern SemiSequentialTopology_ElementDefaultTypeInternal _SemiSequentialTopology_Element_default_instance_;
class SimpleTopology;
struct SimpleTopologyDefaultTypeInternal;
extern SimpleTopologyDefaultTypeInternal _SimpleTopology_default_instance_;
class SimpleTopology_Element;
struct SimpleTopology_ElementDefaultTypeInternal;
extern SimpleTopology_ElementDefaultTypeInternal _SimpleTopology_Element_default_instance_;
class TopologyConfig;
struct TopologyConfigDefaultTypeInternal;
extern TopologyConfigDefaultTypeInternal _TopologyConfig_default_instance_;
class TopologyConfigWithModuleDefinition;
struct TopologyConfigWithModuleDefinitionDefaultTypeInternal;
extern TopologyConfigWithModuleDefinitionDefaultTypeInternal _TopologyConfigWithModuleDefinition_default_instance_;
}  // namespace proto
}  // namespace sw
PROTOBUF_NAMESPACE_OPEN
template<> ::sw::proto::MinimalTopology* Arena::CreateMaybeMessage<::sw::proto::MinimalTopology>(Arena*);
template<> ::sw::proto::Module* Arena::CreateMaybeMessage<::sw::proto::Module>(Arena*);
template<> ::sw::proto::Param* Arena::CreateMaybeMessage<::sw::proto::Param>(Arena*);
template<> ::sw::proto::RunnableTopology* Arena::CreateMaybeMessage<::sw::proto::RunnableTopology>(Arena*);
template<> ::sw::proto::RunnableTopology_Element* Arena::CreateMaybeMessage<::sw::proto::RunnableTopology_Element>(Arena*);
template<> ::sw::proto::SemiSequentialTopology* Arena::CreateMaybeMessage<::sw::proto::SemiSequentialTopology>(Arena*);
template<> ::sw::proto::SemiSequentialTopology_Element* Arena::CreateMaybeMessage<::sw::proto::SemiSequentialTopology_Element>(Arena*);
template<> ::sw::proto::SimpleTopology* Arena::CreateMaybeMessage<::sw::proto::SimpleTopology>(Arena*);
template<> ::sw::proto::SimpleTopology_Element* Arena::CreateMaybeMessage<::sw::proto::SimpleTopology_Element>(Arena*);
template<> ::sw::proto::TopologyConfig* Arena::CreateMaybeMessage<::sw::proto::TopologyConfig>(Arena*);
template<> ::sw::proto::TopologyConfigWithModuleDefinition* Arena::CreateMaybeMessage<::sw::proto::TopologyConfigWithModuleDefinition>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sw {
namespace proto {

// ===================================================================

class Param final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sw.proto.Param) */ {
 public:
  inline Param() : Param(nullptr) {}
  ~Param() override;
  explicit PROTOBUF_CONSTEXPR Param(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Param(const Param& from);
  Param(Param&& from) noexcept
    : Param() {
    *this = ::std::move(from);
  }

  inline Param& operator=(const Param& from) {
    CopyFrom(from);
    return *this;
  }
  inline Param& operator=(Param&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Param& default_instance() {
    return *internal_default_instance();
  }
  static inline const Param* internal_default_instance() {
    return reinterpret_cast<const Param*>(
               &_Param_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Param& a, Param& b) {
    a.Swap(&b);
  }
  inline void Swap(Param* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Param* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Param* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Param>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Param& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Param& from) {
    Param::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Param* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sw.proto.Param";
  }
  protected:
  explicit Param(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // required string key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // required string value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:sw.proto.Param)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_topology_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class Module final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sw.proto.Module) */ {
 public:
  inline Module() : Module(nullptr) {}
  ~Module() override;
  explicit PROTOBUF_CONSTEXPR Module(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Module(const Module& from);
  Module(Module&& from) noexcept
    : Module() {
    *this = ::std::move(from);
  }

  inline Module& operator=(const Module& from) {
    CopyFrom(from);
    return *this;
  }
  inline Module& operator=(Module&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Module& default_instance() {
    return *internal_default_instance();
  }
  static inline const Module* internal_default_instance() {
    return reinterpret_cast<const Module*>(
               &_Module_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Module& a, Module& b) {
    a.Swap(&b);
  }
  inline void Swap(Module* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Module* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Module* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Module>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Module& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Module& from) {
    Module::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Module* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sw.proto.Module";
  }
  protected:
  explicit Module(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCustomParamsFieldNumber = 3,
    kNameFieldNumber = 1,
    kFactoryNameFieldNumber = 2,
  };
  // repeated .sw.proto.Param custom_params = 3;
  int custom_params_size() const;
  private:
  int _internal_custom_params_size() const;
  public:
  void clear_custom_params();
  ::sw::proto::Param* mutable_custom_params(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sw::proto::Param >*
      mutable_custom_params();
  private:
  const ::sw::proto::Param& _internal_custom_params(int index) const;
  ::sw::proto::Param* _internal_add_custom_params();
  public:
  const ::sw::proto::Param& custom_params(int index) const;
  ::sw::proto::Param* add_custom_params();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sw::proto::Param >&
      custom_params() const;

  // required string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required string factory_name = 2;
  bool has_factory_name() const;
  private:
  bool _internal_has_factory_name() const;
  public:
  void clear_factory_name();
  const std::string& factory_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_factory_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_factory_name();
  PROTOBUF_NODISCARD std::string* release_factory_name();
  void set_allocated_factory_name(std::string* factory_name);
  private:
  const std::string& _internal_factory_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_factory_name(const std::string& value);
  std::string* _internal_mutable_factory_name();
  public:

  // @@protoc_insertion_point(class_scope:sw.proto.Module)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sw::proto::Param > custom_params_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr factory_name_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_topology_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class MinimalTopology final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sw.proto.MinimalTopology) */ {
 public:
  inline MinimalTopology() : MinimalTopology(nullptr) {}
  ~MinimalTopology() override;
  explicit PROTOBUF_CONSTEXPR MinimalTopology(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MinimalTopology(const MinimalTopology& from);
  MinimalTopology(MinimalTopology&& from) noexcept
    : MinimalTopology() {
    *this = ::std::move(from);
  }

  inline MinimalTopology& operator=(const MinimalTopology& from) {
    CopyFrom(from);
    return *this;
  }
  inline MinimalTopology& operator=(MinimalTopology&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MinimalTopology& default_instance() {
    return *internal_default_instance();
  }
  static inline const MinimalTopology* internal_default_instance() {
    return reinterpret_cast<const MinimalTopology*>(
               &_MinimalTopology_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MinimalTopology& a, MinimalTopology& b) {
    a.Swap(&b);
  }
  inline void Swap(MinimalTopology* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MinimalTopology* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MinimalTopology* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MinimalTopology>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MinimalTopology& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MinimalTopology& from) {
    MinimalTopology::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MinimalTopology* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sw.proto.MinimalTopology";
  }
  protected:
  explicit MinimalTopology(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kElementFieldNumber = 2,
    kNameFieldNumber = 1,
  };
  // repeated string element = 2;
  int element_size() const;
  private:
  int _internal_element_size() const;
  public:
  void clear_element();
  const std::string& element(int index) const;
  std::string* mutable_element(int index);
  void set_element(int index, const std::string& value);
  void set_element(int index, std::string&& value);
  void set_element(int index, const char* value);
  void set_element(int index, const char* value, size_t size);
  std::string* add_element();
  void add_element(const std::string& value);
  void add_element(std::string&& value);
  void add_element(const char* value);
  void add_element(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& element() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_element();
  private:
  const std::string& _internal_element(int index) const;
  std::string* _internal_add_element();
  public:

  // required string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:sw.proto.MinimalTopology)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> element_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_topology_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class SimpleTopology_Element final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sw.proto.SimpleTopology.Element) */ {
 public:
  inline SimpleTopology_Element() : SimpleTopology_Element(nullptr) {}
  ~SimpleTopology_Element() override;
  explicit PROTOBUF_CONSTEXPR SimpleTopology_Element(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SimpleTopology_Element(const SimpleTopology_Element& from);
  SimpleTopology_Element(SimpleTopology_Element&& from) noexcept
    : SimpleTopology_Element() {
    *this = ::std::move(from);
  }

  inline SimpleTopology_Element& operator=(const SimpleTopology_Element& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimpleTopology_Element& operator=(SimpleTopology_Element&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SimpleTopology_Element& default_instance() {
    return *internal_default_instance();
  }
  static inline const SimpleTopology_Element* internal_default_instance() {
    return reinterpret_cast<const SimpleTopology_Element*>(
               &_SimpleTopology_Element_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SimpleTopology_Element& a, SimpleTopology_Element& b) {
    a.Swap(&b);
  }
  inline void Swap(SimpleTopology_Element* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimpleTopology_Element* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SimpleTopology_Element* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SimpleTopology_Element>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SimpleTopology_Element& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SimpleTopology_Element& from) {
    SimpleTopology_Element::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimpleTopology_Element* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sw.proto.SimpleTopology.Element";
  }
  protected:
  explicit SimpleTopology_Element(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCustomParamsFieldNumber = 2,
    kNameFieldNumber = 1,
  };
  // repeated .sw.proto.Param custom_params = 2;
  int custom_params_size() const;
  private:
  int _internal_custom_params_size() const;
  public:
  void clear_custom_params();
  ::sw::proto::Param* mutable_custom_params(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sw::proto::Param >*
      mutable_custom_params();
  private:
  const ::sw::proto::Param& _internal_custom_params(int index) const;
  ::sw::proto::Param* _internal_add_custom_params();
  public:
  const ::sw::proto::Param& custom_params(int index) const;
  ::sw::proto::Param* add_custom_params();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sw::proto::Param >&
      custom_params() const;

  // required string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:sw.proto.SimpleTopology.Element)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sw::proto::Param > custom_params_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_topology_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class SimpleTopology final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sw.proto.SimpleTopology) */ {
 public:
  inline SimpleTopology() : SimpleTopology(nullptr) {}
  ~SimpleTopology() override;
  explicit PROTOBUF_CONSTEXPR SimpleTopology(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SimpleTopology(const SimpleTopology& from);
  SimpleTopology(SimpleTopology&& from) noexcept
    : SimpleTopology() {
    *this = ::std::move(from);
  }

  inline SimpleTopology& operator=(const SimpleTopology& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimpleTopology& operator=(SimpleTopology&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SimpleTopology& default_instance() {
    return *internal_default_instance();
  }
  static inline const SimpleTopology* internal_default_instance() {
    return reinterpret_cast<const SimpleTopology*>(
               &_SimpleTopology_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SimpleTopology& a, SimpleTopology& b) {
    a.Swap(&b);
  }
  inline void Swap(SimpleTopology* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimpleTopology* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SimpleTopology* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SimpleTopology>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SimpleTopology& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SimpleTopology& from) {
    SimpleTopology::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimpleTopology* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sw.proto.SimpleTopology";
  }
  protected:
  explicit SimpleTopology(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SimpleTopology_Element Element;

  // accessors -------------------------------------------------------

  enum : int {
    kElementFieldNumber = 2,
    kNameFieldNumber = 1,
  };
  // repeated .sw.proto.SimpleTopology.Element element = 2;
  int element_size() const;
  private:
  int _internal_element_size() const;
  public:
  void clear_element();
  ::sw::proto::SimpleTopology_Element* mutable_element(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sw::proto::SimpleTopology_Element >*
      mutable_element();
  private:
  const ::sw::proto::SimpleTopology_Element& _internal_element(int index) const;
  ::sw::proto::SimpleTopology_Element* _internal_add_element();
  public:
  const ::sw::proto::SimpleTopology_Element& element(int index) const;
  ::sw::proto::SimpleTopology_Element* add_element();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sw::proto::SimpleTopology_Element >&
      element() const;

  // required string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:sw.proto.SimpleTopology)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sw::proto::SimpleTopology_Element > element_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_topology_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class SemiSequentialTopology_Element final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sw.proto.SemiSequentialTopology.Element) */ {
 public:
  inline SemiSequentialTopology_Element() : SemiSequentialTopology_Element(nullptr) {}
  ~SemiSequentialTopology_Element() override;
  explicit PROTOBUF_CONSTEXPR SemiSequentialTopology_Element(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SemiSequentialTopology_Element(const SemiSequentialTopology_Element& from);
  SemiSequentialTopology_Element(SemiSequentialTopology_Element&& from) noexcept
    : SemiSequentialTopology_Element() {
    *this = ::std::move(from);
  }

  inline SemiSequentialTopology_Element& operator=(const SemiSequentialTopology_Element& from) {
    CopyFrom(from);
    return *this;
  }
  inline SemiSequentialTopology_Element& operator=(SemiSequentialTopology_Element&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SemiSequentialTopology_Element& default_instance() {
    return *internal_default_instance();
  }
  static inline const SemiSequentialTopology_Element* internal_default_instance() {
    return reinterpret_cast<const SemiSequentialTopology_Element*>(
               &_SemiSequentialTopology_Element_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SemiSequentialTopology_Element& a, SemiSequentialTopology_Element& b) {
    a.Swap(&b);
  }
  inline void Swap(SemiSequentialTopology_Element* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SemiSequentialTopology_Element* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SemiSequentialTopology_Element* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SemiSequentialTopology_Element>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SemiSequentialTopology_Element& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SemiSequentialTopology_Element& from) {
    SemiSequentialTopology_Element::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SemiSequentialTopology_Element* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sw.proto.SemiSequentialTopology.Element";
  }
  protected:
  explicit SemiSequentialTopology_Element(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDependencyFieldNumber = 2,
    kCustomParamsFieldNumber = 3,
    kNameFieldNumber = 1,
  };
  // repeated string dependency = 2;
  int dependency_size() const;
  private:
  int _internal_dependency_size() const;
  public:
  void clear_dependency();
  const std::string& dependency(int index) const;
  std::string* mutable_dependency(int index);
  void set_dependency(int index, const std::string& value);
  void set_dependency(int index, std::string&& value);
  void set_dependency(int index, const char* value);
  void set_dependency(int index, const char* value, size_t size);
  std::string* add_dependency();
  void add_dependency(const std::string& value);
  void add_dependency(std::string&& value);
  void add_dependency(const char* value);
  void add_dependency(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& dependency() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_dependency();
  private:
  const std::string& _internal_dependency(int index) const;
  std::string* _internal_add_dependency();
  public:

  // repeated .sw.proto.Param custom_params = 3;
  int custom_params_size() const;
  private:
  int _internal_custom_params_size() const;
  public:
  void clear_custom_params();
  ::sw::proto::Param* mutable_custom_params(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sw::proto::Param >*
      mutable_custom_params();
  private:
  const ::sw::proto::Param& _internal_custom_params(int index) const;
  ::sw::proto::Param* _internal_add_custom_params();
  public:
  const ::sw::proto::Param& custom_params(int index) const;
  ::sw::proto::Param* add_custom_params();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sw::proto::Param >&
      custom_params() const;

  // required string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:sw.proto.SemiSequentialTopology.Element)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> dependency_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sw::proto::Param > custom_params_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_topology_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class SemiSequentialTopology final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sw.proto.SemiSequentialTopology) */ {
 public:
  inline SemiSequentialTopology() : SemiSequentialTopology(nullptr) {}
  ~SemiSequentialTopology() override;
  explicit PROTOBUF_CONSTEXPR SemiSequentialTopology(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SemiSequentialTopology(const SemiSequentialTopology& from);
  SemiSequentialTopology(SemiSequentialTopology&& from) noexcept
    : SemiSequentialTopology() {
    *this = ::std::move(from);
  }

  inline SemiSequentialTopology& operator=(const SemiSequentialTopology& from) {
    CopyFrom(from);
    return *this;
  }
  inline SemiSequentialTopology& operator=(SemiSequentialTopology&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SemiSequentialTopology& default_instance() {
    return *internal_default_instance();
  }
  static inline const SemiSequentialTopology* internal_default_instance() {
    return reinterpret_cast<const SemiSequentialTopology*>(
               &_SemiSequentialTopology_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SemiSequentialTopology& a, SemiSequentialTopology& b) {
    a.Swap(&b);
  }
  inline void Swap(SemiSequentialTopology* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SemiSequentialTopology* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SemiSequentialTopology* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SemiSequentialTopology>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SemiSequentialTopology& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SemiSequentialTopology& from) {
    SemiSequentialTopology::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SemiSequentialTopology* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sw.proto.SemiSequentialTopology";
  }
  protected:
  explicit SemiSequentialTopology(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SemiSequentialTopology_Element Element;

  // accessors -------------------------------------------------------

  enum : int {
    kElementFieldNumber = 2,
    kCustomParamsFieldNumber = 3,
    kNameFieldNumber = 1,
  };
  // repeated .sw.proto.SemiSequentialTopology.Element element = 2;
  int element_size() const;
  private:
  int _internal_element_size() const;
  public:
  void clear_element();
  ::sw::proto::SemiSequentialTopology_Element* mutable_element(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sw::proto::SemiSequentialTopology_Element >*
      mutable_element();
  private:
  const ::sw::proto::SemiSequentialTopology_Element& _internal_element(int index) const;
  ::sw::proto::SemiSequentialTopology_Element* _internal_add_element();
  public:
  const ::sw::proto::SemiSequentialTopology_Element& element(int index) const;
  ::sw::proto::SemiSequentialTopology_Element* add_element();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sw::proto::SemiSequentialTopology_Element >&
      element() const;

  // repeated .sw.proto.Param custom_params = 3;
  int custom_params_size() const;
  private:
  int _internal_custom_params_size() const;
  public:
  void clear_custom_params();
  ::sw::proto::Param* mutable_custom_params(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sw::proto::Param >*
      mutable_custom_params();
  private:
  const ::sw::proto::Param& _internal_custom_params(int index) const;
  ::sw::proto::Param* _internal_add_custom_params();
  public:
  const ::sw::proto::Param& custom_params(int index) const;
  ::sw::proto::Param* add_custom_params();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sw::proto::Param >&
      custom_params() const;

  // required string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:sw.proto.SemiSequentialTopology)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sw::proto::SemiSequentialTopology_Element > element_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sw::proto::Param > custom_params_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_topology_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class RunnableTopology_Element final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sw.proto.RunnableTopology.Element) */ {
 public:
  inline RunnableTopology_Element() : RunnableTopology_Element(nullptr) {}
  ~RunnableTopology_Element() override;
  explicit PROTOBUF_CONSTEXPR RunnableTopology_Element(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RunnableTopology_Element(const RunnableTopology_Element& from);
  RunnableTopology_Element(RunnableTopology_Element&& from) noexcept
    : RunnableTopology_Element() {
    *this = ::std::move(from);
  }

  inline RunnableTopology_Element& operator=(const RunnableTopology_Element& from) {
    CopyFrom(from);
    return *this;
  }
  inline RunnableTopology_Element& operator=(RunnableTopology_Element&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RunnableTopology_Element& default_instance() {
    return *internal_default_instance();
  }
  static inline const RunnableTopology_Element* internal_default_instance() {
    return reinterpret_cast<const RunnableTopology_Element*>(
               &_RunnableTopology_Element_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(RunnableTopology_Element& a, RunnableTopology_Element& b) {
    a.Swap(&b);
  }
  inline void Swap(RunnableTopology_Element* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RunnableTopology_Element* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RunnableTopology_Element* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RunnableTopology_Element>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RunnableTopology_Element& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RunnableTopology_Element& from) {
    RunnableTopology_Element::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RunnableTopology_Element* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sw.proto.RunnableTopology.Element";
  }
  protected:
  explicit RunnableTopology_Element(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDependencyFieldNumber = 2,
    kCustomParamsFieldNumber = 3,
    kNameFieldNumber = 1,
    kAllowParallelFieldNumber = 4,
  };
  // repeated string dependency = 2;
  int dependency_size() const;
  private:
  int _internal_dependency_size() const;
  public:
  void clear_dependency();
  const std::string& dependency(int index) const;
  std::string* mutable_dependency(int index);
  void set_dependency(int index, const std::string& value);
  void set_dependency(int index, std::string&& value);
  void set_dependency(int index, const char* value);
  void set_dependency(int index, const char* value, size_t size);
  std::string* add_dependency();
  void add_dependency(const std::string& value);
  void add_dependency(std::string&& value);
  void add_dependency(const char* value);
  void add_dependency(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& dependency() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_dependency();
  private:
  const std::string& _internal_dependency(int index) const;
  std::string* _internal_add_dependency();
  public:

  // repeated .sw.proto.Param custom_params = 3;
  int custom_params_size() const;
  private:
  int _internal_custom_params_size() const;
  public:
  void clear_custom_params();
  ::sw::proto::Param* mutable_custom_params(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sw::proto::Param >*
      mutable_custom_params();
  private:
  const ::sw::proto::Param& _internal_custom_params(int index) const;
  ::sw::proto::Param* _internal_add_custom_params();
  public:
  const ::sw::proto::Param& custom_params(int index) const;
  ::sw::proto::Param* add_custom_params();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sw::proto::Param >&
      custom_params() const;

  // required string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional bool allow_parallel = 4 [default = false];
  bool has_allow_parallel() const;
  private:
  bool _internal_has_allow_parallel() const;
  public:
  void clear_allow_parallel();
  bool allow_parallel() const;
  void set_allow_parallel(bool value);
  private:
  bool _internal_allow_parallel() const;
  void _internal_set_allow_parallel(bool value);
  public:

  // @@protoc_insertion_point(class_scope:sw.proto.RunnableTopology.Element)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> dependency_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sw::proto::Param > custom_params_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    bool allow_parallel_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_topology_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class RunnableTopology final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sw.proto.RunnableTopology) */ {
 public:
  inline RunnableTopology() : RunnableTopology(nullptr) {}
  ~RunnableTopology() override;
  explicit PROTOBUF_CONSTEXPR RunnableTopology(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RunnableTopology(const RunnableTopology& from);
  RunnableTopology(RunnableTopology&& from) noexcept
    : RunnableTopology() {
    *this = ::std::move(from);
  }

  inline RunnableTopology& operator=(const RunnableTopology& from) {
    CopyFrom(from);
    return *this;
  }
  inline RunnableTopology& operator=(RunnableTopology&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RunnableTopology& default_instance() {
    return *internal_default_instance();
  }
  static inline const RunnableTopology* internal_default_instance() {
    return reinterpret_cast<const RunnableTopology*>(
               &_RunnableTopology_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(RunnableTopology& a, RunnableTopology& b) {
    a.Swap(&b);
  }
  inline void Swap(RunnableTopology* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RunnableTopology* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RunnableTopology* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RunnableTopology>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RunnableTopology& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RunnableTopology& from) {
    RunnableTopology::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RunnableTopology* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sw.proto.RunnableTopology";
  }
  protected:
  explicit RunnableTopology(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef RunnableTopology_Element Element;

  // accessors -------------------------------------------------------

  enum : int {
    kElementFieldNumber = 2,
    kCustomParamsFieldNumber = 3,
    kNameFieldNumber = 1,
  };
  // repeated .sw.proto.RunnableTopology.Element element = 2;
  int element_size() const;
  private:
  int _internal_element_size() const;
  public:
  void clear_element();
  ::sw::proto::RunnableTopology_Element* mutable_element(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sw::proto::RunnableTopology_Element >*
      mutable_element();
  private:
  const ::sw::proto::RunnableTopology_Element& _internal_element(int index) const;
  ::sw::proto::RunnableTopology_Element* _internal_add_element();
  public:
  const ::sw::proto::RunnableTopology_Element& element(int index) const;
  ::sw::proto::RunnableTopology_Element* add_element();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sw::proto::RunnableTopology_Element >&
      element() const;

  // repeated .sw.proto.Param custom_params = 3;
  int custom_params_size() const;
  private:
  int _internal_custom_params_size() const;
  public:
  void clear_custom_params();
  ::sw::proto::Param* mutable_custom_params(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sw::proto::Param >*
      mutable_custom_params();
  private:
  const ::sw::proto::Param& _internal_custom_params(int index) const;
  ::sw::proto::Param* _internal_add_custom_params();
  public:
  const ::sw::proto::Param& custom_params(int index) const;
  ::sw::proto::Param* add_custom_params();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sw::proto::Param >&
      custom_params() const;

  // required string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:sw.proto.RunnableTopology)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sw::proto::RunnableTopology_Element > element_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sw::proto::Param > custom_params_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_topology_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class TopologyConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sw.proto.TopologyConfig) */ {
 public:
  inline TopologyConfig() : TopologyConfig(nullptr) {}
  ~TopologyConfig() override;
  explicit PROTOBUF_CONSTEXPR TopologyConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TopologyConfig(const TopologyConfig& from);
  TopologyConfig(TopologyConfig&& from) noexcept
    : TopologyConfig() {
    *this = ::std::move(from);
  }

  inline TopologyConfig& operator=(const TopologyConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline TopologyConfig& operator=(TopologyConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TopologyConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const TopologyConfig* internal_default_instance() {
    return reinterpret_cast<const TopologyConfig*>(
               &_TopologyConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(TopologyConfig& a, TopologyConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(TopologyConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TopologyConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TopologyConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TopologyConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TopologyConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TopologyConfig& from) {
    TopologyConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TopologyConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sw.proto.TopologyConfig";
  }
  protected:
  explicit TopologyConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModuleFieldNumber = 1,
    kRunnableTopologyFieldNumber = 2,
    kMinimalTopologyFieldNumber = 3,
    kSimpleTopologyFieldNumber = 4,
    kSemiSequentialTopologyFieldNumber = 5,
  };
  // repeated .sw.proto.Module module = 1;
  int module_size() const;
  private:
  int _internal_module_size() const;
  public:
  void clear_module();
  ::sw::proto::Module* mutable_module(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sw::proto::Module >*
      mutable_module();
  private:
  const ::sw::proto::Module& _internal_module(int index) const;
  ::sw::proto::Module* _internal_add_module();
  public:
  const ::sw::proto::Module& module(int index) const;
  ::sw::proto::Module* add_module();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sw::proto::Module >&
      module() const;

  // repeated .sw.proto.RunnableTopology runnable_topology = 2;
  int runnable_topology_size() const;
  private:
  int _internal_runnable_topology_size() const;
  public:
  void clear_runnable_topology();
  ::sw::proto::RunnableTopology* mutable_runnable_topology(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sw::proto::RunnableTopology >*
      mutable_runnable_topology();
  private:
  const ::sw::proto::RunnableTopology& _internal_runnable_topology(int index) const;
  ::sw::proto::RunnableTopology* _internal_add_runnable_topology();
  public:
  const ::sw::proto::RunnableTopology& runnable_topology(int index) const;
  ::sw::proto::RunnableTopology* add_runnable_topology();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sw::proto::RunnableTopology >&
      runnable_topology() const;

  // repeated .sw.proto.MinimalTopology minimal_topology = 3;
  int minimal_topology_size() const;
  private:
  int _internal_minimal_topology_size() const;
  public:
  void clear_minimal_topology();
  ::sw::proto::MinimalTopology* mutable_minimal_topology(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sw::proto::MinimalTopology >*
      mutable_minimal_topology();
  private:
  const ::sw::proto::MinimalTopology& _internal_minimal_topology(int index) const;
  ::sw::proto::MinimalTopology* _internal_add_minimal_topology();
  public:
  const ::sw::proto::MinimalTopology& minimal_topology(int index) const;
  ::sw::proto::MinimalTopology* add_minimal_topology();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sw::proto::MinimalTopology >&
      minimal_topology() const;

  // repeated .sw.proto.SimpleTopology simple_topology = 4;
  int simple_topology_size() const;
  private:
  int _internal_simple_topology_size() const;
  public:
  void clear_simple_topology();
  ::sw::proto::SimpleTopology* mutable_simple_topology(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sw::proto::SimpleTopology >*
      mutable_simple_topology();
  private:
  const ::sw::proto::SimpleTopology& _internal_simple_topology(int index) const;
  ::sw::proto::SimpleTopology* _internal_add_simple_topology();
  public:
  const ::sw::proto::SimpleTopology& simple_topology(int index) const;
  ::sw::proto::SimpleTopology* add_simple_topology();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sw::proto::SimpleTopology >&
      simple_topology() const;

  // repeated .sw.proto.SemiSequentialTopology semi_sequential_topology = 5;
  int semi_sequential_topology_size() const;
  private:
  int _internal_semi_sequential_topology_size() const;
  public:
  void clear_semi_sequential_topology();
  ::sw::proto::SemiSequentialTopology* mutable_semi_sequential_topology(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sw::proto::SemiSequentialTopology >*
      mutable_semi_sequential_topology();
  private:
  const ::sw::proto::SemiSequentialTopology& _internal_semi_sequential_topology(int index) const;
  ::sw::proto::SemiSequentialTopology* _internal_add_semi_sequential_topology();
  public:
  const ::sw::proto::SemiSequentialTopology& semi_sequential_topology(int index) const;
  ::sw::proto::SemiSequentialTopology* add_semi_sequential_topology();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sw::proto::SemiSequentialTopology >&
      semi_sequential_topology() const;

  // @@protoc_insertion_point(class_scope:sw.proto.TopologyConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sw::proto::Module > module_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sw::proto::RunnableTopology > runnable_topology_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sw::proto::MinimalTopology > minimal_topology_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sw::proto::SimpleTopology > simple_topology_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sw::proto::SemiSequentialTopology > semi_sequential_topology_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_topology_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class TopologyConfigWithModuleDefinition final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sw.proto.TopologyConfigWithModuleDefinition) */ {
 public:
  inline TopologyConfigWithModuleDefinition() : TopologyConfigWithModuleDefinition(nullptr) {}
  ~TopologyConfigWithModuleDefinition() override;
  explicit PROTOBUF_CONSTEXPR TopologyConfigWithModuleDefinition(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TopologyConfigWithModuleDefinition(const TopologyConfigWithModuleDefinition& from);
  TopologyConfigWithModuleDefinition(TopologyConfigWithModuleDefinition&& from) noexcept
    : TopologyConfigWithModuleDefinition() {
    *this = ::std::move(from);
  }

  inline TopologyConfigWithModuleDefinition& operator=(const TopologyConfigWithModuleDefinition& from) {
    CopyFrom(from);
    return *this;
  }
  inline TopologyConfigWithModuleDefinition& operator=(TopologyConfigWithModuleDefinition&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TopologyConfigWithModuleDefinition& default_instance() {
    return *internal_default_instance();
  }
  static inline const TopologyConfigWithModuleDefinition* internal_default_instance() {
    return reinterpret_cast<const TopologyConfigWithModuleDefinition*>(
               &_TopologyConfigWithModuleDefinition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(TopologyConfigWithModuleDefinition& a, TopologyConfigWithModuleDefinition& b) {
    a.Swap(&b);
  }
  inline void Swap(TopologyConfigWithModuleDefinition* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TopologyConfigWithModuleDefinition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TopologyConfigWithModuleDefinition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TopologyConfigWithModuleDefinition>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TopologyConfigWithModuleDefinition& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TopologyConfigWithModuleDefinition& from) {
    TopologyConfigWithModuleDefinition::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TopologyConfigWithModuleDefinition* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sw.proto.TopologyConfigWithModuleDefinition";
  }
  protected:
  explicit TopologyConfigWithModuleDefinition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModuleFieldNumber = 1,
    kRunnableTopologyFieldNumber = 2,
  };
  // repeated .sw.proto.Module module = 1;
  int module_size() const;
  private:
  int _internal_module_size() const;
  public:
  void clear_module();
  ::sw::proto::Module* mutable_module(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sw::proto::Module >*
      mutable_module();
  private:
  const ::sw::proto::Module& _internal_module(int index) const;
  ::sw::proto::Module* _internal_add_module();
  public:
  const ::sw::proto::Module& module(int index) const;
  ::sw::proto::Module* add_module();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sw::proto::Module >&
      module() const;

  // required .sw.proto.RunnableTopology runnable_topology = 2;
  bool has_runnable_topology() const;
  private:
  bool _internal_has_runnable_topology() const;
  public:
  void clear_runnable_topology();
  const ::sw::proto::RunnableTopology& runnable_topology() const;
  PROTOBUF_NODISCARD ::sw::proto::RunnableTopology* release_runnable_topology();
  ::sw::proto::RunnableTopology* mutable_runnable_topology();
  void set_allocated_runnable_topology(::sw::proto::RunnableTopology* runnable_topology);
  private:
  const ::sw::proto::RunnableTopology& _internal_runnable_topology() const;
  ::sw::proto::RunnableTopology* _internal_mutable_runnable_topology();
  public:
  void unsafe_arena_set_allocated_runnable_topology(
      ::sw::proto::RunnableTopology* runnable_topology);
  ::sw::proto::RunnableTopology* unsafe_arena_release_runnable_topology();

  // @@protoc_insertion_point(class_scope:sw.proto.TopologyConfigWithModuleDefinition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sw::proto::Module > module_;
    ::sw::proto::RunnableTopology* runnable_topology_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_topology_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Param

// required string key = 1;
inline bool Param::_internal_has_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Param::has_key() const {
  return _internal_has_key();
}
inline void Param::clear_key() {
  _impl_.key_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Param::key() const {
  // @@protoc_insertion_point(field_get:sw.proto.Param.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Param::set_key(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sw.proto.Param.key)
}
inline std::string* Param::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:sw.proto.Param.key)
  return _s;
}
inline const std::string& Param::_internal_key() const {
  return _impl_.key_.Get();
}
inline void Param::_internal_set_key(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* Param::_internal_mutable_key() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.key_.Mutable(GetArenaForAllocation());
}
inline std::string* Param::release_key() {
  // @@protoc_insertion_point(field_release:sw.proto.Param.key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.key_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Param::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sw.proto.Param.key)
}

// required string value = 2;
inline bool Param::_internal_has_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Param::has_value() const {
  return _internal_has_value();
}
inline void Param::clear_value() {
  _impl_.value_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Param::value() const {
  // @@protoc_insertion_point(field_get:sw.proto.Param.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Param::set_value(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.value_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sw.proto.Param.value)
}
inline std::string* Param::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:sw.proto.Param.value)
  return _s;
}
inline const std::string& Param::_internal_value() const {
  return _impl_.value_.Get();
}
inline void Param::_internal_set_value(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* Param::_internal_mutable_value() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.value_.Mutable(GetArenaForAllocation());
}
inline std::string* Param::release_value() {
  // @@protoc_insertion_point(field_release:sw.proto.Param.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.value_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Param::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sw.proto.Param.value)
}

// -------------------------------------------------------------------

// Module

// required string name = 1;
inline bool Module::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Module::has_name() const {
  return _internal_has_name();
}
inline void Module::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Module::name() const {
  // @@protoc_insertion_point(field_get:sw.proto.Module.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Module::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sw.proto.Module.name)
}
inline std::string* Module::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:sw.proto.Module.name)
  return _s;
}
inline const std::string& Module::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Module::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Module::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Module::release_name() {
  // @@protoc_insertion_point(field_release:sw.proto.Module.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Module::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sw.proto.Module.name)
}

// required string factory_name = 2;
inline bool Module::_internal_has_factory_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Module::has_factory_name() const {
  return _internal_has_factory_name();
}
inline void Module::clear_factory_name() {
  _impl_.factory_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Module::factory_name() const {
  // @@protoc_insertion_point(field_get:sw.proto.Module.factory_name)
  return _internal_factory_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Module::set_factory_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.factory_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sw.proto.Module.factory_name)
}
inline std::string* Module::mutable_factory_name() {
  std::string* _s = _internal_mutable_factory_name();
  // @@protoc_insertion_point(field_mutable:sw.proto.Module.factory_name)
  return _s;
}
inline const std::string& Module::_internal_factory_name() const {
  return _impl_.factory_name_.Get();
}
inline void Module::_internal_set_factory_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.factory_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Module::_internal_mutable_factory_name() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.factory_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Module::release_factory_name() {
  // @@protoc_insertion_point(field_release:sw.proto.Module.factory_name)
  if (!_internal_has_factory_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.factory_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.factory_name_.IsDefault()) {
    _impl_.factory_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Module::set_allocated_factory_name(std::string* factory_name) {
  if (factory_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.factory_name_.SetAllocated(factory_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.factory_name_.IsDefault()) {
    _impl_.factory_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sw.proto.Module.factory_name)
}

// repeated .sw.proto.Param custom_params = 3;
inline int Module::_internal_custom_params_size() const {
  return _impl_.custom_params_.size();
}
inline int Module::custom_params_size() const {
  return _internal_custom_params_size();
}
inline void Module::clear_custom_params() {
  _impl_.custom_params_.Clear();
}
inline ::sw::proto::Param* Module::mutable_custom_params(int index) {
  // @@protoc_insertion_point(field_mutable:sw.proto.Module.custom_params)
  return _impl_.custom_params_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sw::proto::Param >*
Module::mutable_custom_params() {
  // @@protoc_insertion_point(field_mutable_list:sw.proto.Module.custom_params)
  return &_impl_.custom_params_;
}
inline const ::sw::proto::Param& Module::_internal_custom_params(int index) const {
  return _impl_.custom_params_.Get(index);
}
inline const ::sw::proto::Param& Module::custom_params(int index) const {
  // @@protoc_insertion_point(field_get:sw.proto.Module.custom_params)
  return _internal_custom_params(index);
}
inline ::sw::proto::Param* Module::_internal_add_custom_params() {
  return _impl_.custom_params_.Add();
}
inline ::sw::proto::Param* Module::add_custom_params() {
  ::sw::proto::Param* _add = _internal_add_custom_params();
  // @@protoc_insertion_point(field_add:sw.proto.Module.custom_params)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sw::proto::Param >&
Module::custom_params() const {
  // @@protoc_insertion_point(field_list:sw.proto.Module.custom_params)
  return _impl_.custom_params_;
}

// -------------------------------------------------------------------

// MinimalTopology

// required string name = 1;
inline bool MinimalTopology::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MinimalTopology::has_name() const {
  return _internal_has_name();
}
inline void MinimalTopology::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MinimalTopology::name() const {
  // @@protoc_insertion_point(field_get:sw.proto.MinimalTopology.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MinimalTopology::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sw.proto.MinimalTopology.name)
}
inline std::string* MinimalTopology::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:sw.proto.MinimalTopology.name)
  return _s;
}
inline const std::string& MinimalTopology::_internal_name() const {
  return _impl_.name_.Get();
}
inline void MinimalTopology::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* MinimalTopology::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* MinimalTopology::release_name() {
  // @@protoc_insertion_point(field_release:sw.proto.MinimalTopology.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void MinimalTopology::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sw.proto.MinimalTopology.name)
}

// repeated string element = 2;
inline int MinimalTopology::_internal_element_size() const {
  return _impl_.element_.size();
}
inline int MinimalTopology::element_size() const {
  return _internal_element_size();
}
inline void MinimalTopology::clear_element() {
  _impl_.element_.Clear();
}
inline std::string* MinimalTopology::add_element() {
  std::string* _s = _internal_add_element();
  // @@protoc_insertion_point(field_add_mutable:sw.proto.MinimalTopology.element)
  return _s;
}
inline const std::string& MinimalTopology::_internal_element(int index) const {
  return _impl_.element_.Get(index);
}
inline const std::string& MinimalTopology::element(int index) const {
  // @@protoc_insertion_point(field_get:sw.proto.MinimalTopology.element)
  return _internal_element(index);
}
inline std::string* MinimalTopology::mutable_element(int index) {
  // @@protoc_insertion_point(field_mutable:sw.proto.MinimalTopology.element)
  return _impl_.element_.Mutable(index);
}
inline void MinimalTopology::set_element(int index, const std::string& value) {
  _impl_.element_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:sw.proto.MinimalTopology.element)
}
inline void MinimalTopology::set_element(int index, std::string&& value) {
  _impl_.element_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:sw.proto.MinimalTopology.element)
}
inline void MinimalTopology::set_element(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.element_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sw.proto.MinimalTopology.element)
}
inline void MinimalTopology::set_element(int index, const char* value, size_t size) {
  _impl_.element_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sw.proto.MinimalTopology.element)
}
inline std::string* MinimalTopology::_internal_add_element() {
  return _impl_.element_.Add();
}
inline void MinimalTopology::add_element(const std::string& value) {
  _impl_.element_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:sw.proto.MinimalTopology.element)
}
inline void MinimalTopology::add_element(std::string&& value) {
  _impl_.element_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:sw.proto.MinimalTopology.element)
}
inline void MinimalTopology::add_element(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.element_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sw.proto.MinimalTopology.element)
}
inline void MinimalTopology::add_element(const char* value, size_t size) {
  _impl_.element_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sw.proto.MinimalTopology.element)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MinimalTopology::element() const {
  // @@protoc_insertion_point(field_list:sw.proto.MinimalTopology.element)
  return _impl_.element_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MinimalTopology::mutable_element() {
  // @@protoc_insertion_point(field_mutable_list:sw.proto.MinimalTopology.element)
  return &_impl_.element_;
}

// -------------------------------------------------------------------

// SimpleTopology_Element

// required string name = 1;
inline bool SimpleTopology_Element::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SimpleTopology_Element::has_name() const {
  return _internal_has_name();
}
inline void SimpleTopology_Element::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SimpleTopology_Element::name() const {
  // @@protoc_insertion_point(field_get:sw.proto.SimpleTopology.Element.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SimpleTopology_Element::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sw.proto.SimpleTopology.Element.name)
}
inline std::string* SimpleTopology_Element::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:sw.proto.SimpleTopology.Element.name)
  return _s;
}
inline const std::string& SimpleTopology_Element::_internal_name() const {
  return _impl_.name_.Get();
}
inline void SimpleTopology_Element::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* SimpleTopology_Element::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* SimpleTopology_Element::release_name() {
  // @@protoc_insertion_point(field_release:sw.proto.SimpleTopology.Element.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SimpleTopology_Element::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sw.proto.SimpleTopology.Element.name)
}

// repeated .sw.proto.Param custom_params = 2;
inline int SimpleTopology_Element::_internal_custom_params_size() const {
  return _impl_.custom_params_.size();
}
inline int SimpleTopology_Element::custom_params_size() const {
  return _internal_custom_params_size();
}
inline void SimpleTopology_Element::clear_custom_params() {
  _impl_.custom_params_.Clear();
}
inline ::sw::proto::Param* SimpleTopology_Element::mutable_custom_params(int index) {
  // @@protoc_insertion_point(field_mutable:sw.proto.SimpleTopology.Element.custom_params)
  return _impl_.custom_params_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sw::proto::Param >*
SimpleTopology_Element::mutable_custom_params() {
  // @@protoc_insertion_point(field_mutable_list:sw.proto.SimpleTopology.Element.custom_params)
  return &_impl_.custom_params_;
}
inline const ::sw::proto::Param& SimpleTopology_Element::_internal_custom_params(int index) const {
  return _impl_.custom_params_.Get(index);
}
inline const ::sw::proto::Param& SimpleTopology_Element::custom_params(int index) const {
  // @@protoc_insertion_point(field_get:sw.proto.SimpleTopology.Element.custom_params)
  return _internal_custom_params(index);
}
inline ::sw::proto::Param* SimpleTopology_Element::_internal_add_custom_params() {
  return _impl_.custom_params_.Add();
}
inline ::sw::proto::Param* SimpleTopology_Element::add_custom_params() {
  ::sw::proto::Param* _add = _internal_add_custom_params();
  // @@protoc_insertion_point(field_add:sw.proto.SimpleTopology.Element.custom_params)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sw::proto::Param >&
SimpleTopology_Element::custom_params() const {
  // @@protoc_insertion_point(field_list:sw.proto.SimpleTopology.Element.custom_params)
  return _impl_.custom_params_;
}

// -------------------------------------------------------------------

// SimpleTopology

// required string name = 1;
inline bool SimpleTopology::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SimpleTopology::has_name() const {
  return _internal_has_name();
}
inline void SimpleTopology::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SimpleTopology::name() const {
  // @@protoc_insertion_point(field_get:sw.proto.SimpleTopology.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SimpleTopology::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sw.proto.SimpleTopology.name)
}
inline std::string* SimpleTopology::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:sw.proto.SimpleTopology.name)
  return _s;
}
inline const std::string& SimpleTopology::_internal_name() const {
  return _impl_.name_.Get();
}
inline void SimpleTopology::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* SimpleTopology::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* SimpleTopology::release_name() {
  // @@protoc_insertion_point(field_release:sw.proto.SimpleTopology.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SimpleTopology::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sw.proto.SimpleTopology.name)
}

// repeated .sw.proto.SimpleTopology.Element element = 2;
inline int SimpleTopology::_internal_element_size() const {
  return _impl_.element_.size();
}
inline int SimpleTopology::element_size() const {
  return _internal_element_size();
}
inline void SimpleTopology::clear_element() {
  _impl_.element_.Clear();
}
inline ::sw::proto::SimpleTopology_Element* SimpleTopology::mutable_element(int index) {
  // @@protoc_insertion_point(field_mutable:sw.proto.SimpleTopology.element)
  return _impl_.element_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sw::proto::SimpleTopology_Element >*
SimpleTopology::mutable_element() {
  // @@protoc_insertion_point(field_mutable_list:sw.proto.SimpleTopology.element)
  return &_impl_.element_;
}
inline const ::sw::proto::SimpleTopology_Element& SimpleTopology::_internal_element(int index) const {
  return _impl_.element_.Get(index);
}
inline const ::sw::proto::SimpleTopology_Element& SimpleTopology::element(int index) const {
  // @@protoc_insertion_point(field_get:sw.proto.SimpleTopology.element)
  return _internal_element(index);
}
inline ::sw::proto::SimpleTopology_Element* SimpleTopology::_internal_add_element() {
  return _impl_.element_.Add();
}
inline ::sw::proto::SimpleTopology_Element* SimpleTopology::add_element() {
  ::sw::proto::SimpleTopology_Element* _add = _internal_add_element();
  // @@protoc_insertion_point(field_add:sw.proto.SimpleTopology.element)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sw::proto::SimpleTopology_Element >&
SimpleTopology::element() const {
  // @@protoc_insertion_point(field_list:sw.proto.SimpleTopology.element)
  return _impl_.element_;
}

// -------------------------------------------------------------------

// SemiSequentialTopology_Element

// required string name = 1;
inline bool SemiSequentialTopology_Element::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SemiSequentialTopology_Element::has_name() const {
  return _internal_has_name();
}
inline void SemiSequentialTopology_Element::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SemiSequentialTopology_Element::name() const {
  // @@protoc_insertion_point(field_get:sw.proto.SemiSequentialTopology.Element.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SemiSequentialTopology_Element::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sw.proto.SemiSequentialTopology.Element.name)
}
inline std::string* SemiSequentialTopology_Element::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:sw.proto.SemiSequentialTopology.Element.name)
  return _s;
}
inline const std::string& SemiSequentialTopology_Element::_internal_name() const {
  return _impl_.name_.Get();
}
inline void SemiSequentialTopology_Element::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* SemiSequentialTopology_Element::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* SemiSequentialTopology_Element::release_name() {
  // @@protoc_insertion_point(field_release:sw.proto.SemiSequentialTopology.Element.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SemiSequentialTopology_Element::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sw.proto.SemiSequentialTopology.Element.name)
}

// repeated string dependency = 2;
inline int SemiSequentialTopology_Element::_internal_dependency_size() const {
  return _impl_.dependency_.size();
}
inline int SemiSequentialTopology_Element::dependency_size() const {
  return _internal_dependency_size();
}
inline void SemiSequentialTopology_Element::clear_dependency() {
  _impl_.dependency_.Clear();
}
inline std::string* SemiSequentialTopology_Element::add_dependency() {
  std::string* _s = _internal_add_dependency();
  // @@protoc_insertion_point(field_add_mutable:sw.proto.SemiSequentialTopology.Element.dependency)
  return _s;
}
inline const std::string& SemiSequentialTopology_Element::_internal_dependency(int index) const {
  return _impl_.dependency_.Get(index);
}
inline const std::string& SemiSequentialTopology_Element::dependency(int index) const {
  // @@protoc_insertion_point(field_get:sw.proto.SemiSequentialTopology.Element.dependency)
  return _internal_dependency(index);
}
inline std::string* SemiSequentialTopology_Element::mutable_dependency(int index) {
  // @@protoc_insertion_point(field_mutable:sw.proto.SemiSequentialTopology.Element.dependency)
  return _impl_.dependency_.Mutable(index);
}
inline void SemiSequentialTopology_Element::set_dependency(int index, const std::string& value) {
  _impl_.dependency_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:sw.proto.SemiSequentialTopology.Element.dependency)
}
inline void SemiSequentialTopology_Element::set_dependency(int index, std::string&& value) {
  _impl_.dependency_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:sw.proto.SemiSequentialTopology.Element.dependency)
}
inline void SemiSequentialTopology_Element::set_dependency(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.dependency_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sw.proto.SemiSequentialTopology.Element.dependency)
}
inline void SemiSequentialTopology_Element::set_dependency(int index, const char* value, size_t size) {
  _impl_.dependency_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sw.proto.SemiSequentialTopology.Element.dependency)
}
inline std::string* SemiSequentialTopology_Element::_internal_add_dependency() {
  return _impl_.dependency_.Add();
}
inline void SemiSequentialTopology_Element::add_dependency(const std::string& value) {
  _impl_.dependency_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:sw.proto.SemiSequentialTopology.Element.dependency)
}
inline void SemiSequentialTopology_Element::add_dependency(std::string&& value) {
  _impl_.dependency_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:sw.proto.SemiSequentialTopology.Element.dependency)
}
inline void SemiSequentialTopology_Element::add_dependency(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.dependency_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sw.proto.SemiSequentialTopology.Element.dependency)
}
inline void SemiSequentialTopology_Element::add_dependency(const char* value, size_t size) {
  _impl_.dependency_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sw.proto.SemiSequentialTopology.Element.dependency)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SemiSequentialTopology_Element::dependency() const {
  // @@protoc_insertion_point(field_list:sw.proto.SemiSequentialTopology.Element.dependency)
  return _impl_.dependency_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SemiSequentialTopology_Element::mutable_dependency() {
  // @@protoc_insertion_point(field_mutable_list:sw.proto.SemiSequentialTopology.Element.dependency)
  return &_impl_.dependency_;
}

// repeated .sw.proto.Param custom_params = 3;
inline int SemiSequentialTopology_Element::_internal_custom_params_size() const {
  return _impl_.custom_params_.size();
}
inline int SemiSequentialTopology_Element::custom_params_size() const {
  return _internal_custom_params_size();
}
inline void SemiSequentialTopology_Element::clear_custom_params() {
  _impl_.custom_params_.Clear();
}
inline ::sw::proto::Param* SemiSequentialTopology_Element::mutable_custom_params(int index) {
  // @@protoc_insertion_point(field_mutable:sw.proto.SemiSequentialTopology.Element.custom_params)
  return _impl_.custom_params_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sw::proto::Param >*
SemiSequentialTopology_Element::mutable_custom_params() {
  // @@protoc_insertion_point(field_mutable_list:sw.proto.SemiSequentialTopology.Element.custom_params)
  return &_impl_.custom_params_;
}
inline const ::sw::proto::Param& SemiSequentialTopology_Element::_internal_custom_params(int index) const {
  return _impl_.custom_params_.Get(index);
}
inline const ::sw::proto::Param& SemiSequentialTopology_Element::custom_params(int index) const {
  // @@protoc_insertion_point(field_get:sw.proto.SemiSequentialTopology.Element.custom_params)
  return _internal_custom_params(index);
}
inline ::sw::proto::Param* SemiSequentialTopology_Element::_internal_add_custom_params() {
  return _impl_.custom_params_.Add();
}
inline ::sw::proto::Param* SemiSequentialTopology_Element::add_custom_params() {
  ::sw::proto::Param* _add = _internal_add_custom_params();
  // @@protoc_insertion_point(field_add:sw.proto.SemiSequentialTopology.Element.custom_params)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sw::proto::Param >&
SemiSequentialTopology_Element::custom_params() const {
  // @@protoc_insertion_point(field_list:sw.proto.SemiSequentialTopology.Element.custom_params)
  return _impl_.custom_params_;
}

// -------------------------------------------------------------------

// SemiSequentialTopology

// required string name = 1;
inline bool SemiSequentialTopology::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SemiSequentialTopology::has_name() const {
  return _internal_has_name();
}
inline void SemiSequentialTopology::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SemiSequentialTopology::name() const {
  // @@protoc_insertion_point(field_get:sw.proto.SemiSequentialTopology.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SemiSequentialTopology::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sw.proto.SemiSequentialTopology.name)
}
inline std::string* SemiSequentialTopology::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:sw.proto.SemiSequentialTopology.name)
  return _s;
}
inline const std::string& SemiSequentialTopology::_internal_name() const {
  return _impl_.name_.Get();
}
inline void SemiSequentialTopology::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* SemiSequentialTopology::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* SemiSequentialTopology::release_name() {
  // @@protoc_insertion_point(field_release:sw.proto.SemiSequentialTopology.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SemiSequentialTopology::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sw.proto.SemiSequentialTopology.name)
}

// repeated .sw.proto.SemiSequentialTopology.Element element = 2;
inline int SemiSequentialTopology::_internal_element_size() const {
  return _impl_.element_.size();
}
inline int SemiSequentialTopology::element_size() const {
  return _internal_element_size();
}
inline void SemiSequentialTopology::clear_element() {
  _impl_.element_.Clear();
}
inline ::sw::proto::SemiSequentialTopology_Element* SemiSequentialTopology::mutable_element(int index) {
  // @@protoc_insertion_point(field_mutable:sw.proto.SemiSequentialTopology.element)
  return _impl_.element_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sw::proto::SemiSequentialTopology_Element >*
SemiSequentialTopology::mutable_element() {
  // @@protoc_insertion_point(field_mutable_list:sw.proto.SemiSequentialTopology.element)
  return &_impl_.element_;
}
inline const ::sw::proto::SemiSequentialTopology_Element& SemiSequentialTopology::_internal_element(int index) const {
  return _impl_.element_.Get(index);
}
inline const ::sw::proto::SemiSequentialTopology_Element& SemiSequentialTopology::element(int index) const {
  // @@protoc_insertion_point(field_get:sw.proto.SemiSequentialTopology.element)
  return _internal_element(index);
}
inline ::sw::proto::SemiSequentialTopology_Element* SemiSequentialTopology::_internal_add_element() {
  return _impl_.element_.Add();
}
inline ::sw::proto::SemiSequentialTopology_Element* SemiSequentialTopology::add_element() {
  ::sw::proto::SemiSequentialTopology_Element* _add = _internal_add_element();
  // @@protoc_insertion_point(field_add:sw.proto.SemiSequentialTopology.element)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sw::proto::SemiSequentialTopology_Element >&
SemiSequentialTopology::element() const {
  // @@protoc_insertion_point(field_list:sw.proto.SemiSequentialTopology.element)
  return _impl_.element_;
}

// repeated .sw.proto.Param custom_params = 3;
inline int SemiSequentialTopology::_internal_custom_params_size() const {
  return _impl_.custom_params_.size();
}
inline int SemiSequentialTopology::custom_params_size() const {
  return _internal_custom_params_size();
}
inline void SemiSequentialTopology::clear_custom_params() {
  _impl_.custom_params_.Clear();
}
inline ::sw::proto::Param* SemiSequentialTopology::mutable_custom_params(int index) {
  // @@protoc_insertion_point(field_mutable:sw.proto.SemiSequentialTopology.custom_params)
  return _impl_.custom_params_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sw::proto::Param >*
SemiSequentialTopology::mutable_custom_params() {
  // @@protoc_insertion_point(field_mutable_list:sw.proto.SemiSequentialTopology.custom_params)
  return &_impl_.custom_params_;
}
inline const ::sw::proto::Param& SemiSequentialTopology::_internal_custom_params(int index) const {
  return _impl_.custom_params_.Get(index);
}
inline const ::sw::proto::Param& SemiSequentialTopology::custom_params(int index) const {
  // @@protoc_insertion_point(field_get:sw.proto.SemiSequentialTopology.custom_params)
  return _internal_custom_params(index);
}
inline ::sw::proto::Param* SemiSequentialTopology::_internal_add_custom_params() {
  return _impl_.custom_params_.Add();
}
inline ::sw::proto::Param* SemiSequentialTopology::add_custom_params() {
  ::sw::proto::Param* _add = _internal_add_custom_params();
  // @@protoc_insertion_point(field_add:sw.proto.SemiSequentialTopology.custom_params)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sw::proto::Param >&
SemiSequentialTopology::custom_params() const {
  // @@protoc_insertion_point(field_list:sw.proto.SemiSequentialTopology.custom_params)
  return _impl_.custom_params_;
}

// -------------------------------------------------------------------

// RunnableTopology_Element

// required string name = 1;
inline bool RunnableTopology_Element::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RunnableTopology_Element::has_name() const {
  return _internal_has_name();
}
inline void RunnableTopology_Element::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RunnableTopology_Element::name() const {
  // @@protoc_insertion_point(field_get:sw.proto.RunnableTopology.Element.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RunnableTopology_Element::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sw.proto.RunnableTopology.Element.name)
}
inline std::string* RunnableTopology_Element::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:sw.proto.RunnableTopology.Element.name)
  return _s;
}
inline const std::string& RunnableTopology_Element::_internal_name() const {
  return _impl_.name_.Get();
}
inline void RunnableTopology_Element::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* RunnableTopology_Element::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* RunnableTopology_Element::release_name() {
  // @@protoc_insertion_point(field_release:sw.proto.RunnableTopology.Element.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RunnableTopology_Element::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sw.proto.RunnableTopology.Element.name)
}

// repeated string dependency = 2;
inline int RunnableTopology_Element::_internal_dependency_size() const {
  return _impl_.dependency_.size();
}
inline int RunnableTopology_Element::dependency_size() const {
  return _internal_dependency_size();
}
inline void RunnableTopology_Element::clear_dependency() {
  _impl_.dependency_.Clear();
}
inline std::string* RunnableTopology_Element::add_dependency() {
  std::string* _s = _internal_add_dependency();
  // @@protoc_insertion_point(field_add_mutable:sw.proto.RunnableTopology.Element.dependency)
  return _s;
}
inline const std::string& RunnableTopology_Element::_internal_dependency(int index) const {
  return _impl_.dependency_.Get(index);
}
inline const std::string& RunnableTopology_Element::dependency(int index) const {
  // @@protoc_insertion_point(field_get:sw.proto.RunnableTopology.Element.dependency)
  return _internal_dependency(index);
}
inline std::string* RunnableTopology_Element::mutable_dependency(int index) {
  // @@protoc_insertion_point(field_mutable:sw.proto.RunnableTopology.Element.dependency)
  return _impl_.dependency_.Mutable(index);
}
inline void RunnableTopology_Element::set_dependency(int index, const std::string& value) {
  _impl_.dependency_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:sw.proto.RunnableTopology.Element.dependency)
}
inline void RunnableTopology_Element::set_dependency(int index, std::string&& value) {
  _impl_.dependency_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:sw.proto.RunnableTopology.Element.dependency)
}
inline void RunnableTopology_Element::set_dependency(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.dependency_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sw.proto.RunnableTopology.Element.dependency)
}
inline void RunnableTopology_Element::set_dependency(int index, const char* value, size_t size) {
  _impl_.dependency_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sw.proto.RunnableTopology.Element.dependency)
}
inline std::string* RunnableTopology_Element::_internal_add_dependency() {
  return _impl_.dependency_.Add();
}
inline void RunnableTopology_Element::add_dependency(const std::string& value) {
  _impl_.dependency_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:sw.proto.RunnableTopology.Element.dependency)
}
inline void RunnableTopology_Element::add_dependency(std::string&& value) {
  _impl_.dependency_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:sw.proto.RunnableTopology.Element.dependency)
}
inline void RunnableTopology_Element::add_dependency(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.dependency_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sw.proto.RunnableTopology.Element.dependency)
}
inline void RunnableTopology_Element::add_dependency(const char* value, size_t size) {
  _impl_.dependency_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sw.proto.RunnableTopology.Element.dependency)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RunnableTopology_Element::dependency() const {
  // @@protoc_insertion_point(field_list:sw.proto.RunnableTopology.Element.dependency)
  return _impl_.dependency_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RunnableTopology_Element::mutable_dependency() {
  // @@protoc_insertion_point(field_mutable_list:sw.proto.RunnableTopology.Element.dependency)
  return &_impl_.dependency_;
}

// repeated .sw.proto.Param custom_params = 3;
inline int RunnableTopology_Element::_internal_custom_params_size() const {
  return _impl_.custom_params_.size();
}
inline int RunnableTopology_Element::custom_params_size() const {
  return _internal_custom_params_size();
}
inline void RunnableTopology_Element::clear_custom_params() {
  _impl_.custom_params_.Clear();
}
inline ::sw::proto::Param* RunnableTopology_Element::mutable_custom_params(int index) {
  // @@protoc_insertion_point(field_mutable:sw.proto.RunnableTopology.Element.custom_params)
  return _impl_.custom_params_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sw::proto::Param >*
RunnableTopology_Element::mutable_custom_params() {
  // @@protoc_insertion_point(field_mutable_list:sw.proto.RunnableTopology.Element.custom_params)
  return &_impl_.custom_params_;
}
inline const ::sw::proto::Param& RunnableTopology_Element::_internal_custom_params(int index) const {
  return _impl_.custom_params_.Get(index);
}
inline const ::sw::proto::Param& RunnableTopology_Element::custom_params(int index) const {
  // @@protoc_insertion_point(field_get:sw.proto.RunnableTopology.Element.custom_params)
  return _internal_custom_params(index);
}
inline ::sw::proto::Param* RunnableTopology_Element::_internal_add_custom_params() {
  return _impl_.custom_params_.Add();
}
inline ::sw::proto::Param* RunnableTopology_Element::add_custom_params() {
  ::sw::proto::Param* _add = _internal_add_custom_params();
  // @@protoc_insertion_point(field_add:sw.proto.RunnableTopology.Element.custom_params)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sw::proto::Param >&
RunnableTopology_Element::custom_params() const {
  // @@protoc_insertion_point(field_list:sw.proto.RunnableTopology.Element.custom_params)
  return _impl_.custom_params_;
}

// optional bool allow_parallel = 4 [default = false];
inline bool RunnableTopology_Element::_internal_has_allow_parallel() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RunnableTopology_Element::has_allow_parallel() const {
  return _internal_has_allow_parallel();
}
inline void RunnableTopology_Element::clear_allow_parallel() {
  _impl_.allow_parallel_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool RunnableTopology_Element::_internal_allow_parallel() const {
  return _impl_.allow_parallel_;
}
inline bool RunnableTopology_Element::allow_parallel() const {
  // @@protoc_insertion_point(field_get:sw.proto.RunnableTopology.Element.allow_parallel)
  return _internal_allow_parallel();
}
inline void RunnableTopology_Element::_internal_set_allow_parallel(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.allow_parallel_ = value;
}
inline void RunnableTopology_Element::set_allow_parallel(bool value) {
  _internal_set_allow_parallel(value);
  // @@protoc_insertion_point(field_set:sw.proto.RunnableTopology.Element.allow_parallel)
}

// -------------------------------------------------------------------

// RunnableTopology

// required string name = 1;
inline bool RunnableTopology::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RunnableTopology::has_name() const {
  return _internal_has_name();
}
inline void RunnableTopology::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RunnableTopology::name() const {
  // @@protoc_insertion_point(field_get:sw.proto.RunnableTopology.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RunnableTopology::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sw.proto.RunnableTopology.name)
}
inline std::string* RunnableTopology::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:sw.proto.RunnableTopology.name)
  return _s;
}
inline const std::string& RunnableTopology::_internal_name() const {
  return _impl_.name_.Get();
}
inline void RunnableTopology::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* RunnableTopology::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* RunnableTopology::release_name() {
  // @@protoc_insertion_point(field_release:sw.proto.RunnableTopology.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RunnableTopology::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sw.proto.RunnableTopology.name)
}

// repeated .sw.proto.RunnableTopology.Element element = 2;
inline int RunnableTopology::_internal_element_size() const {
  return _impl_.element_.size();
}
inline int RunnableTopology::element_size() const {
  return _internal_element_size();
}
inline void RunnableTopology::clear_element() {
  _impl_.element_.Clear();
}
inline ::sw::proto::RunnableTopology_Element* RunnableTopology::mutable_element(int index) {
  // @@protoc_insertion_point(field_mutable:sw.proto.RunnableTopology.element)
  return _impl_.element_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sw::proto::RunnableTopology_Element >*
RunnableTopology::mutable_element() {
  // @@protoc_insertion_point(field_mutable_list:sw.proto.RunnableTopology.element)
  return &_impl_.element_;
}
inline const ::sw::proto::RunnableTopology_Element& RunnableTopology::_internal_element(int index) const {
  return _impl_.element_.Get(index);
}
inline const ::sw::proto::RunnableTopology_Element& RunnableTopology::element(int index) const {
  // @@protoc_insertion_point(field_get:sw.proto.RunnableTopology.element)
  return _internal_element(index);
}
inline ::sw::proto::RunnableTopology_Element* RunnableTopology::_internal_add_element() {
  return _impl_.element_.Add();
}
inline ::sw::proto::RunnableTopology_Element* RunnableTopology::add_element() {
  ::sw::proto::RunnableTopology_Element* _add = _internal_add_element();
  // @@protoc_insertion_point(field_add:sw.proto.RunnableTopology.element)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sw::proto::RunnableTopology_Element >&
RunnableTopology::element() const {
  // @@protoc_insertion_point(field_list:sw.proto.RunnableTopology.element)
  return _impl_.element_;
}

// repeated .sw.proto.Param custom_params = 3;
inline int RunnableTopology::_internal_custom_params_size() const {
  return _impl_.custom_params_.size();
}
inline int RunnableTopology::custom_params_size() const {
  return _internal_custom_params_size();
}
inline void RunnableTopology::clear_custom_params() {
  _impl_.custom_params_.Clear();
}
inline ::sw::proto::Param* RunnableTopology::mutable_custom_params(int index) {
  // @@protoc_insertion_point(field_mutable:sw.proto.RunnableTopology.custom_params)
  return _impl_.custom_params_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sw::proto::Param >*
RunnableTopology::mutable_custom_params() {
  // @@protoc_insertion_point(field_mutable_list:sw.proto.RunnableTopology.custom_params)
  return &_impl_.custom_params_;
}
inline const ::sw::proto::Param& RunnableTopology::_internal_custom_params(int index) const {
  return _impl_.custom_params_.Get(index);
}
inline const ::sw::proto::Param& RunnableTopology::custom_params(int index) const {
  // @@protoc_insertion_point(field_get:sw.proto.RunnableTopology.custom_params)
  return _internal_custom_params(index);
}
inline ::sw::proto::Param* RunnableTopology::_internal_add_custom_params() {
  return _impl_.custom_params_.Add();
}
inline ::sw::proto::Param* RunnableTopology::add_custom_params() {
  ::sw::proto::Param* _add = _internal_add_custom_params();
  // @@protoc_insertion_point(field_add:sw.proto.RunnableTopology.custom_params)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sw::proto::Param >&
RunnableTopology::custom_params() const {
  // @@protoc_insertion_point(field_list:sw.proto.RunnableTopology.custom_params)
  return _impl_.custom_params_;
}

// -------------------------------------------------------------------

// TopologyConfig

// repeated .sw.proto.Module module = 1;
inline int TopologyConfig::_internal_module_size() const {
  return _impl_.module_.size();
}
inline int TopologyConfig::module_size() const {
  return _internal_module_size();
}
inline void TopologyConfig::clear_module() {
  _impl_.module_.Clear();
}
inline ::sw::proto::Module* TopologyConfig::mutable_module(int index) {
  // @@protoc_insertion_point(field_mutable:sw.proto.TopologyConfig.module)
  return _impl_.module_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sw::proto::Module >*
TopologyConfig::mutable_module() {
  // @@protoc_insertion_point(field_mutable_list:sw.proto.TopologyConfig.module)
  return &_impl_.module_;
}
inline const ::sw::proto::Module& TopologyConfig::_internal_module(int index) const {
  return _impl_.module_.Get(index);
}
inline const ::sw::proto::Module& TopologyConfig::module(int index) const {
  // @@protoc_insertion_point(field_get:sw.proto.TopologyConfig.module)
  return _internal_module(index);
}
inline ::sw::proto::Module* TopologyConfig::_internal_add_module() {
  return _impl_.module_.Add();
}
inline ::sw::proto::Module* TopologyConfig::add_module() {
  ::sw::proto::Module* _add = _internal_add_module();
  // @@protoc_insertion_point(field_add:sw.proto.TopologyConfig.module)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sw::proto::Module >&
TopologyConfig::module() const {
  // @@protoc_insertion_point(field_list:sw.proto.TopologyConfig.module)
  return _impl_.module_;
}

// repeated .sw.proto.RunnableTopology runnable_topology = 2;
inline int TopologyConfig::_internal_runnable_topology_size() const {
  return _impl_.runnable_topology_.size();
}
inline int TopologyConfig::runnable_topology_size() const {
  return _internal_runnable_topology_size();
}
inline void TopologyConfig::clear_runnable_topology() {
  _impl_.runnable_topology_.Clear();
}
inline ::sw::proto::RunnableTopology* TopologyConfig::mutable_runnable_topology(int index) {
  // @@protoc_insertion_point(field_mutable:sw.proto.TopologyConfig.runnable_topology)
  return _impl_.runnable_topology_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sw::proto::RunnableTopology >*
TopologyConfig::mutable_runnable_topology() {
  // @@protoc_insertion_point(field_mutable_list:sw.proto.TopologyConfig.runnable_topology)
  return &_impl_.runnable_topology_;
}
inline const ::sw::proto::RunnableTopology& TopologyConfig::_internal_runnable_topology(int index) const {
  return _impl_.runnable_topology_.Get(index);
}
inline const ::sw::proto::RunnableTopology& TopologyConfig::runnable_topology(int index) const {
  // @@protoc_insertion_point(field_get:sw.proto.TopologyConfig.runnable_topology)
  return _internal_runnable_topology(index);
}
inline ::sw::proto::RunnableTopology* TopologyConfig::_internal_add_runnable_topology() {
  return _impl_.runnable_topology_.Add();
}
inline ::sw::proto::RunnableTopology* TopologyConfig::add_runnable_topology() {
  ::sw::proto::RunnableTopology* _add = _internal_add_runnable_topology();
  // @@protoc_insertion_point(field_add:sw.proto.TopologyConfig.runnable_topology)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sw::proto::RunnableTopology >&
TopologyConfig::runnable_topology() const {
  // @@protoc_insertion_point(field_list:sw.proto.TopologyConfig.runnable_topology)
  return _impl_.runnable_topology_;
}

// repeated .sw.proto.MinimalTopology minimal_topology = 3;
inline int TopologyConfig::_internal_minimal_topology_size() const {
  return _impl_.minimal_topology_.size();
}
inline int TopologyConfig::minimal_topology_size() const {
  return _internal_minimal_topology_size();
}
inline void TopologyConfig::clear_minimal_topology() {
  _impl_.minimal_topology_.Clear();
}
inline ::sw::proto::MinimalTopology* TopologyConfig::mutable_minimal_topology(int index) {
  // @@protoc_insertion_point(field_mutable:sw.proto.TopologyConfig.minimal_topology)
  return _impl_.minimal_topology_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sw::proto::MinimalTopology >*
TopologyConfig::mutable_minimal_topology() {
  // @@protoc_insertion_point(field_mutable_list:sw.proto.TopologyConfig.minimal_topology)
  return &_impl_.minimal_topology_;
}
inline const ::sw::proto::MinimalTopology& TopologyConfig::_internal_minimal_topology(int index) const {
  return _impl_.minimal_topology_.Get(index);
}
inline const ::sw::proto::MinimalTopology& TopologyConfig::minimal_topology(int index) const {
  // @@protoc_insertion_point(field_get:sw.proto.TopologyConfig.minimal_topology)
  return _internal_minimal_topology(index);
}
inline ::sw::proto::MinimalTopology* TopologyConfig::_internal_add_minimal_topology() {
  return _impl_.minimal_topology_.Add();
}
inline ::sw::proto::MinimalTopology* TopologyConfig::add_minimal_topology() {
  ::sw::proto::MinimalTopology* _add = _internal_add_minimal_topology();
  // @@protoc_insertion_point(field_add:sw.proto.TopologyConfig.minimal_topology)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sw::proto::MinimalTopology >&
TopologyConfig::minimal_topology() const {
  // @@protoc_insertion_point(field_list:sw.proto.TopologyConfig.minimal_topology)
  return _impl_.minimal_topology_;
}

// repeated .sw.proto.SimpleTopology simple_topology = 4;
inline int TopologyConfig::_internal_simple_topology_size() const {
  return _impl_.simple_topology_.size();
}
inline int TopologyConfig::simple_topology_size() const {
  return _internal_simple_topology_size();
}
inline void TopologyConfig::clear_simple_topology() {
  _impl_.simple_topology_.Clear();
}
inline ::sw::proto::SimpleTopology* TopologyConfig::mutable_simple_topology(int index) {
  // @@protoc_insertion_point(field_mutable:sw.proto.TopologyConfig.simple_topology)
  return _impl_.simple_topology_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sw::proto::SimpleTopology >*
TopologyConfig::mutable_simple_topology() {
  // @@protoc_insertion_point(field_mutable_list:sw.proto.TopologyConfig.simple_topology)
  return &_impl_.simple_topology_;
}
inline const ::sw::proto::SimpleTopology& TopologyConfig::_internal_simple_topology(int index) const {
  return _impl_.simple_topology_.Get(index);
}
inline const ::sw::proto::SimpleTopology& TopologyConfig::simple_topology(int index) const {
  // @@protoc_insertion_point(field_get:sw.proto.TopologyConfig.simple_topology)
  return _internal_simple_topology(index);
}
inline ::sw::proto::SimpleTopology* TopologyConfig::_internal_add_simple_topology() {
  return _impl_.simple_topology_.Add();
}
inline ::sw::proto::SimpleTopology* TopologyConfig::add_simple_topology() {
  ::sw::proto::SimpleTopology* _add = _internal_add_simple_topology();
  // @@protoc_insertion_point(field_add:sw.proto.TopologyConfig.simple_topology)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sw::proto::SimpleTopology >&
TopologyConfig::simple_topology() const {
  // @@protoc_insertion_point(field_list:sw.proto.TopologyConfig.simple_topology)
  return _impl_.simple_topology_;
}

// repeated .sw.proto.SemiSequentialTopology semi_sequential_topology = 5;
inline int TopologyConfig::_internal_semi_sequential_topology_size() const {
  return _impl_.semi_sequential_topology_.size();
}
inline int TopologyConfig::semi_sequential_topology_size() const {
  return _internal_semi_sequential_topology_size();
}
inline void TopologyConfig::clear_semi_sequential_topology() {
  _impl_.semi_sequential_topology_.Clear();
}
inline ::sw::proto::SemiSequentialTopology* TopologyConfig::mutable_semi_sequential_topology(int index) {
  // @@protoc_insertion_point(field_mutable:sw.proto.TopologyConfig.semi_sequential_topology)
  return _impl_.semi_sequential_topology_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sw::proto::SemiSequentialTopology >*
TopologyConfig::mutable_semi_sequential_topology() {
  // @@protoc_insertion_point(field_mutable_list:sw.proto.TopologyConfig.semi_sequential_topology)
  return &_impl_.semi_sequential_topology_;
}
inline const ::sw::proto::SemiSequentialTopology& TopologyConfig::_internal_semi_sequential_topology(int index) const {
  return _impl_.semi_sequential_topology_.Get(index);
}
inline const ::sw::proto::SemiSequentialTopology& TopologyConfig::semi_sequential_topology(int index) const {
  // @@protoc_insertion_point(field_get:sw.proto.TopologyConfig.semi_sequential_topology)
  return _internal_semi_sequential_topology(index);
}
inline ::sw::proto::SemiSequentialTopology* TopologyConfig::_internal_add_semi_sequential_topology() {
  return _impl_.semi_sequential_topology_.Add();
}
inline ::sw::proto::SemiSequentialTopology* TopologyConfig::add_semi_sequential_topology() {
  ::sw::proto::SemiSequentialTopology* _add = _internal_add_semi_sequential_topology();
  // @@protoc_insertion_point(field_add:sw.proto.TopologyConfig.semi_sequential_topology)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sw::proto::SemiSequentialTopology >&
TopologyConfig::semi_sequential_topology() const {
  // @@protoc_insertion_point(field_list:sw.proto.TopologyConfig.semi_sequential_topology)
  return _impl_.semi_sequential_topology_;
}

// -------------------------------------------------------------------

// TopologyConfigWithModuleDefinition

// repeated .sw.proto.Module module = 1;
inline int TopologyConfigWithModuleDefinition::_internal_module_size() const {
  return _impl_.module_.size();
}
inline int TopologyConfigWithModuleDefinition::module_size() const {
  return _internal_module_size();
}
inline void TopologyConfigWithModuleDefinition::clear_module() {
  _impl_.module_.Clear();
}
inline ::sw::proto::Module* TopologyConfigWithModuleDefinition::mutable_module(int index) {
  // @@protoc_insertion_point(field_mutable:sw.proto.TopologyConfigWithModuleDefinition.module)
  return _impl_.module_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sw::proto::Module >*
TopologyConfigWithModuleDefinition::mutable_module() {
  // @@protoc_insertion_point(field_mutable_list:sw.proto.TopologyConfigWithModuleDefinition.module)
  return &_impl_.module_;
}
inline const ::sw::proto::Module& TopologyConfigWithModuleDefinition::_internal_module(int index) const {
  return _impl_.module_.Get(index);
}
inline const ::sw::proto::Module& TopologyConfigWithModuleDefinition::module(int index) const {
  // @@protoc_insertion_point(field_get:sw.proto.TopologyConfigWithModuleDefinition.module)
  return _internal_module(index);
}
inline ::sw::proto::Module* TopologyConfigWithModuleDefinition::_internal_add_module() {
  return _impl_.module_.Add();
}
inline ::sw::proto::Module* TopologyConfigWithModuleDefinition::add_module() {
  ::sw::proto::Module* _add = _internal_add_module();
  // @@protoc_insertion_point(field_add:sw.proto.TopologyConfigWithModuleDefinition.module)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sw::proto::Module >&
TopologyConfigWithModuleDefinition::module() const {
  // @@protoc_insertion_point(field_list:sw.proto.TopologyConfigWithModuleDefinition.module)
  return _impl_.module_;
}

// required .sw.proto.RunnableTopology runnable_topology = 2;
inline bool TopologyConfigWithModuleDefinition::_internal_has_runnable_topology() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.runnable_topology_ != nullptr);
  return value;
}
inline bool TopologyConfigWithModuleDefinition::has_runnable_topology() const {
  return _internal_has_runnable_topology();
}
inline void TopologyConfigWithModuleDefinition::clear_runnable_topology() {
  if (_impl_.runnable_topology_ != nullptr) _impl_.runnable_topology_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::sw::proto::RunnableTopology& TopologyConfigWithModuleDefinition::_internal_runnable_topology() const {
  const ::sw::proto::RunnableTopology* p = _impl_.runnable_topology_;
  return p != nullptr ? *p : reinterpret_cast<const ::sw::proto::RunnableTopology&>(
      ::sw::proto::_RunnableTopology_default_instance_);
}
inline const ::sw::proto::RunnableTopology& TopologyConfigWithModuleDefinition::runnable_topology() const {
  // @@protoc_insertion_point(field_get:sw.proto.TopologyConfigWithModuleDefinition.runnable_topology)
  return _internal_runnable_topology();
}
inline void TopologyConfigWithModuleDefinition::unsafe_arena_set_allocated_runnable_topology(
    ::sw::proto::RunnableTopology* runnable_topology) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.runnable_topology_);
  }
  _impl_.runnable_topology_ = runnable_topology;
  if (runnable_topology) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sw.proto.TopologyConfigWithModuleDefinition.runnable_topology)
}
inline ::sw::proto::RunnableTopology* TopologyConfigWithModuleDefinition::release_runnable_topology() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sw::proto::RunnableTopology* temp = _impl_.runnable_topology_;
  _impl_.runnable_topology_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sw::proto::RunnableTopology* TopologyConfigWithModuleDefinition::unsafe_arena_release_runnable_topology() {
  // @@protoc_insertion_point(field_release:sw.proto.TopologyConfigWithModuleDefinition.runnable_topology)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sw::proto::RunnableTopology* temp = _impl_.runnable_topology_;
  _impl_.runnable_topology_ = nullptr;
  return temp;
}
inline ::sw::proto::RunnableTopology* TopologyConfigWithModuleDefinition::_internal_mutable_runnable_topology() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.runnable_topology_ == nullptr) {
    auto* p = CreateMaybeMessage<::sw::proto::RunnableTopology>(GetArenaForAllocation());
    _impl_.runnable_topology_ = p;
  }
  return _impl_.runnable_topology_;
}
inline ::sw::proto::RunnableTopology* TopologyConfigWithModuleDefinition::mutable_runnable_topology() {
  ::sw::proto::RunnableTopology* _msg = _internal_mutable_runnable_topology();
  // @@protoc_insertion_point(field_mutable:sw.proto.TopologyConfigWithModuleDefinition.runnable_topology)
  return _msg;
}
inline void TopologyConfigWithModuleDefinition::set_allocated_runnable_topology(::sw::proto::RunnableTopology* runnable_topology) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.runnable_topology_;
  }
  if (runnable_topology) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(runnable_topology);
    if (message_arena != submessage_arena) {
      runnable_topology = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, runnable_topology, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.runnable_topology_ = runnable_topology;
  // @@protoc_insertion_point(field_set_allocated:sw.proto.TopologyConfigWithModuleDefinition.runnable_topology)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace sw

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_topology_5fconfig_2eproto
